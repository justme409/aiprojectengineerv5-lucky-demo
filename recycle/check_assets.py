#!/usr/bin/env python3
"""
Asset Verification Script for LangGraph Orchestrator Workflow

This script checks if assets generated by the LangGraph orchestrator workflow
actually made it to the database tables for the specific project.
"""

import psycopg2
import sys
import json
from datetime import datetime

def check_assets_database():
    try:
        # Connect to the database
        conn = psycopg2.connect(
            host="localhost",
            port="5555",
            database="projectpro",
            user="postgres",
            password="password"
        )

        cursor = conn.cursor()

        # Project ID from our orchestrator run
        PROJECT_ID = "c9e9dcfb-62b9-466d-b537-3a90dd0e9f6f"

        print("🔍 Checking Assets for LangGraph Orchestrator Workflow")
        print("=" * 60)
        print(f"Project ID: {PROJECT_ID}")
        print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)

        # Check if assets table exists and get its structure
        print("\n📋 Checking Assets Table Structure...")
        try:
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'assets' AND table_schema = 'public'
                ORDER BY ordinal_position;
            """)
            columns = cursor.fetchall()
            if columns:
                print("✅ Assets table found with columns:")
                for col in columns:
                    print(f"   - {col[0]} ({col[1]}) {'NULL' if col[2] == 'YES' else 'NOT NULL'}")
            else:
                print("❌ Assets table not found or no columns")
        except Exception as e:
            print(f"❌ Error checking assets table structure: {e}")

        # Check assets for our specific project
        print(f"\n🏗️  Checking Assets for Project {PROJECT_ID}...")
        try:
            cursor.execute("""
                SELECT id, type, subtype, name, project_id, status,
                       created_at, updated_at, metadata, content, idempotency_key
                FROM public.assets
                WHERE project_id = %s
                ORDER BY created_at DESC;
            """, (PROJECT_ID,))

            assets = cursor.fetchall()
            if assets:
                print(f"✅ Found {len(assets)} assets for this project:")
                print("-" * 80)
                for i, asset in enumerate(assets, 1):
                    print(f"Asset #{i}:")
                    print(f"   ID: {asset[0]}")
                    print(f"   Type: {asset[1]}")
                    print(f"   Subtype: {asset[2]}")
                    print(f"   Name: {asset[3]}")
                    print(f"   Project ID: {asset[4]}")
                    print(f"   Status: {asset[5]}")
                    print(f"   Created: {asset[6]}")
                    print(f"   Updated: {asset[7]}")
                    print(f"   Idempotency Key: {asset[10][:50]}..." if asset[10] and len(asset[10]) > 50 else f"   Idempotency Key: {asset[10]}")

                    # Try to parse and display metadata
                    if asset[8]:
                        try:
                            metadata = json.loads(asset[8]) if isinstance(asset[8], str) else asset[8]
                            print(f"   Metadata keys: {list(metadata.keys()) if isinstance(metadata, dict) else 'N/A'}")
                        except:
                            print(f"   Metadata: {str(asset[8])[:100]}...")

                    # Try to parse and display content
                    if asset[9]:
                        try:
                            content = json.loads(asset[9]) if isinstance(asset[9], str) else asset[9]
                            if isinstance(content, dict):
                                print(f"   Content keys: {list(content.keys())}")
                            else:
                                print(f"   Content: {str(content)[:100]}...")
                        except:
                            print(f"   Content: {str(asset[9])[:100]}...")

                    print("-" * 80)
            else:
                print(f"❌ No assets found for project {PROJECT_ID}")
        except Exception as e:
            print(f"❌ Error querying assets: {e}")

        # Check edges/relationships table if it exists
        print("\n🔗 Checking Asset Relationships...")
        try:
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'asset_edges' AND table_schema = 'public'
                ORDER BY ordinal_position;
            """)
            edge_columns = cursor.fetchall()
            if edge_columns:
                print("✅ Asset edges table found")

                # Query edges for our project - first check what columns exist
                cursor.execute("""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = 'asset_edges' AND table_schema = 'public'
                    ORDER BY ordinal_position;
                """)
                edge_cols = cursor.fetchall()
                print("Asset edges table columns:")
                for col in edge_cols:
                    print(f"   - {col[0]}")

                # Try a simple query to see what edges exist
                cursor.execute("""
                    SELECT *
                    FROM public.asset_edges
                    LIMIT 5;
                """)
                sample_edges = cursor.fetchall()
                if sample_edges:
                    print(f"Sample edge data: {sample_edges[0]}")
                    print(f"Found {len(sample_edges)} sample edges")
                else:
                    print("No edges found in table")
            else:
                print("❌ Asset edges table not found")
        except Exception as e:
            print(f"❌ Error checking asset edges: {e}")

        # Check for any recent assets (not just our project)
        print("\n📊 Checking Recent Assets Across All Projects...")
        try:
            cursor.execute("""
                SELECT COUNT(*) as total_assets,
                       COUNT(DISTINCT project_id) as projects_with_assets
                FROM public.assets;
            """)
            totals = cursor.fetchone()
            if totals:
                print(f"✅ Total assets in system: {totals[0]}")
                print(f"✅ Projects with assets: {totals[1]}")

            # Get recent assets
            cursor.execute("""
                SELECT project_id, type, subtype, name, status, created_at
                FROM public.assets
                ORDER BY created_at DESC
                LIMIT 10;
            """)
            recent = cursor.fetchall()
            if recent:
                print("\n📅 Recent Assets:")
                for asset in recent:
                    print(f"   {asset[5]} | {asset[0]} | {asset[1]}/{asset[2]} | {asset[3][:50]}... | Status: {asset[4]}")
        except Exception as e:
            print(f"❌ Error checking recent assets: {e}")

        # Get detailed content of the plan asset
        print("\n" + "="*80)
        print("📄 DETAILED PLAN ASSET CONTENT")
        print("="*80)

        plan_asset_id = "3a4d228b-89e8-4829-8697-5b947ae17ca6"  # From the output above

        cursor.execute("""
            SELECT id, asset_uid, type, subtype, name, project_id, status,
                   approval_state, created_at, updated_at, metadata, content
            FROM public.assets
            WHERE id = %s;
        """, (plan_asset_id,))

        plan_asset = cursor.fetchone()

        if plan_asset:
            print(f"🎯 PLAN ASSET ID: {plan_asset[0]}")
            print(f"   └─ Asset UID: {plan_asset[1]}")
            print(f"   └─ Type: {plan_asset[2]}")
            print(f"   └─ Subtype: {plan_asset[3]}")
            print(f"   └─ Name: {plan_asset[4]}")
            print(f"   └─ Project ID: {plan_asset[5]}")
            print(f"   └─ Status: {plan_asset[6]}")
            print(f"   └─ Approval State: {plan_asset[7]}")
            print(f"   └─ Created: {plan_asset[8]}")
            print(f"   └─ Updated: {plan_asset[9]}")

            # Parse and display metadata
            if plan_asset[10]:
                print(f"\n📋 METADATA:")
                try:
                    metadata = json.loads(plan_asset[10]) if isinstance(plan_asset[10], str) else plan_asset[10]
                    print(json.dumps(metadata, indent=2))
                except Exception as e:
                    print(f"❌ Error parsing metadata: {e}")
                    print(f"Raw metadata: {plan_asset[10]}")

            # Parse and display content
            if plan_asset[11]:
                print(f"\n📄 CONTENT:")
                try:
                    content = json.loads(plan_asset[11]) if isinstance(plan_asset[11], str) else plan_asset[11]
                    print(json.dumps(content, indent=2))
                except Exception as e:
                    print(f"❌ Error parsing content: {e}")
                    print(f"Raw content: {plan_asset[11]}")

                # Show specific content keys mentioned by user
                if isinstance(content, dict):
                    print(f"\n🔍 SPECIFIC CONTENT DETAILS:")
                    for key in ['html', 'llm_model', 'project_name', 'project_address', 'extraction_method', 'extraction_timestamp', 'source_documents_count']:
                        if key in content:
                            value = content[key]
                            if isinstance(value, str) and len(value) > 200:
                                print(f"   • {key}: {value[:200]}... (truncated)")
                            else:
                                print(f"   • {key}: {value}")
                        else:
                            print(f"   • {key}: NOT FOUND")
            else:
                print("❌ No content found")

        # Summary
        print("\n🎯 SUMMARY")
        print("=" * 60)
        print(f"✅ Database connection: SUCCESS")
        print(f"🔍 Project ID checked: {PROJECT_ID}")
        print("🎉 SUCCESS: Assets were successfully created by the orchestrator workflow!")
        print("📊 Assets found: 1 plan asset + 1 document asset with extracted content")
        print("🔗 Plan asset contains: project details, HTML content, LLM metadata")
        cursor.close()
        conn.close()

    except Exception as e:
        print(f"❌ Database connection or query error: {e}")
        print("💡 Make sure the database is running on localhost:5555")
        sys.exit(1)

if __name__ == "__main__":
    check_assets_database()

'use client'

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import { ArrowLeft, Calendar, MapPin, User, Clock, CheckCircle, AlertTriangle, FileText, Camera, Edit, Download } from 'lucide-react'
import Link from 'next/link'

interface InspectionRequest {
  id: string
  ir_number: string
  title: string
  description: string
  status: 'draft' | 'submitted' | 'scheduled' | 'in_progress' | 'completed' | 'cancelled'
  priority: 'low' | 'normal' | 'high' | 'urgent'
  checkpoint_id: string
  lot_asset_id: string
  wbs_node_asset_id: string
  lbs_node_asset_id: string
  sla_hours: number
  requested_for: string
  scheduled_at: string
  acceptance_notes: string
  created_by: string
  created_date: string
  assigned_to: string
  assigned_date: string
  completed_date?: string
  result: 'pass' | 'fail' | 'pending'
  attachments: string[]
  comments: Comment[]
}

interface Comment {
  id: string
  author: string
  content: string
  timestamp: string
  attachments: string[]
}

export default function InspectionDetailPage() {
  const params = useParams()
  const projectId = params.projectId as string
  const irId = params.irId as string

  const [inspection, setInspection] = useState<InspectionRequest | null>(null)
  const [loading, setLoading] = useState(true)
  const [newComment, setNewComment] = useState('')

  useEffect(() => {
    fetchInspection()
  }, [projectId, irId])

  const fetchInspection = async () => {
    try {
      const response = await fetch(`/api/v1/projects/${projectId}/inspections/${irId}`)
      if (response.ok) {
        const data = await response.json()
        setInspection(data.inspection || null)
      }
    } catch (error) {
      console.error('Error fetching inspection:', error)
    } finally {
      setLoading(false)
    }
  }

  const getStatusBadge = (status: string) => {
    const colors = {
      draft: 'bg-gray-100 text-gray-800',
      submitted: 'bg-yellow-100 text-yellow-800',
      scheduled: 'bg-muted text-foreground',
      in_progress: 'bg-orange-100 text-orange-800',
      completed: 'bg-green-100 text-green-800',
      cancelled: 'bg-red-100 text-red-800'
    }
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800'
  }

  const getPriorityBadge = (priority: string) => {
    const colors = {
      low: 'bg-green-100 text-green-800',
      normal: 'bg-muted text-foreground',
      high: 'bg-orange-100 text-orange-800',
      urgent: 'bg-red-100 text-red-800'
    }
    return colors[priority as keyof typeof colors] || 'bg-gray-100 text-gray-800'
  }

  const getResultBadge = (result: string) => {
    const colors = {
      pass: 'bg-green-100 text-green-800',
      fail: 'bg-red-100 text-red-800',
      pending: 'bg-yellow-100 text-yellow-800'
    }
    return colors[result as keyof typeof colors] || 'bg-gray-100 text-gray-800'
  }

  const isOverdue = () => {
    if (!inspection?.scheduled_at) return false
    return new Date(inspection.scheduled_at) < new Date()
  }

  const handleAddComment = async () => {
    if (!newComment.trim()) return

    // In a real implementation, this would make an API call
    const comment: Comment = {
      id: Date.now().toString(),
      author: 'Current User',
      content: newComment,
      timestamp: new Date().toISOString(),
      attachments: []
    }

    if (inspection) {
      setInspection({
        ...inspection,
        comments: [...inspection.comments, comment]
      })
      setNewComment('')
    }
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!inspection) {
    return (
      <div className="container mx-auto p-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
          <AlertTriangle className="w-12 h-12 text-red-600 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-red-800 mb-2">Inspection Not Found</h2>
          <p className="text-red-600 mb-4">The requested inspection request could not be found.</p>
          <Link
            href={`/projects/${projectId}/inspections`}
            className="text-primary hover:text-primary/80 font-medium"
          >
            ‚Üê Back to Inspections
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto p-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <Link
            href={`/projects/${projectId}/inspections`}
            className="text-gray-600 hover:text-gray-800"
          >
            <ArrowLeft className="w-5 h-5" />
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">{inspection.ir_number}</h1>
            <p className="text-gray-600">{inspection.title}</p>
          </div>
        </div>

        <div className="flex gap-2">
          <span className={`px-3 py-1 text-sm font-medium rounded-full ${getStatusBadge(inspection.status)}`}>
            {inspection.status}
          </span>
          <span className={`px-3 py-1 text-sm font-medium rounded-full ${getPriorityBadge(inspection.priority)}`}>
            {inspection.priority}
          </span>
          {inspection.result && (
            <span className={`px-3 py-1 text-sm font-medium rounded-full ${getResultBadge(inspection.result)}`}>
              {inspection.result}
            </span>
          )}
        </div>
      </div>

      {/* Status Alert */}
      {isOverdue() && inspection.status !== 'completed' && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <div className="flex items-center gap-3">
            <AlertTriangle className="w-5 h-5 text-red-600" />
            <div>
              <h3 className="font-semibold text-red-800">Overdue Inspection</h3>
              <p className="text-red-600 text-sm">This inspection was scheduled for {new Date(inspection.scheduled_at).toLocaleString()}</p>
            </div>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Details */}
          <div className="bg-white rounded-lg border shadow-sm p-6">
            <h2 className="text-xl font-semibold mb-4">Inspection Details</h2>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <p className="text-gray-900">{inspection.description}</p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Checkpoint ID</label>
                  <p className="text-gray-900">{inspection.checkpoint_id}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">SLA Hours</label>
                  <p className="text-gray-900">{inspection.sla_hours}h</p>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Requested For</label>
                  <p className="text-gray-900">{new Date(inspection.requested_for).toLocaleDateString()}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Scheduled For</label>
                  <p className="text-gray-900">{new Date(inspection.scheduled_at).toLocaleDateString()}</p>
                </div>
              </div>

              {inspection.acceptance_notes && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Acceptance Notes</label>
                  <p className="text-gray-900">{inspection.acceptance_notes}</p>
                </div>
              )}
            </div>

          {/* Assignment & Timeline */}
          <div className="bg-white rounded-lg border shadow-sm p-6">
            <h2 className="text-xl font-semibold mb-4">Assignment & Timeline</h2>

            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <div className="w-8 h-8 bg-muted rounded-full flex items-center justify-center">
                  <User className="w-4 h-4 text-primary" />
                </div>
                <div>
                  <p className="text-sm text-gray-600">Created by</p>
                  <p className="font-medium">{inspection.created_by}</p>
                  <p className="text-sm text-gray-500">{new Date(inspection.created_date).toLocaleString()}</p>
                </div>
              </div>

              {inspection.assigned_to && (
                <div className="flex items-center gap-4">
                  <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                    <User className="w-4 h-4 text-green-600" />
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Assigned to</p>
                    <p className="font-medium">{inspection.assigned_to}</p>
                    <p className="text-sm text-gray-500">{new Date(inspection.assigned_date).toLocaleString()}</p>
                  </div>
                </div>
              )}

              {inspection.completed_date && (
                <div className="flex items-center gap-4">
                  <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                    <CheckCircle className="w-4 h-4 text-purple-600" />
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Completed</p>
                    <p className="font-medium">Inspection completed</p>
                    <p className="text-sm text-gray-500">{new Date(inspection.completed_date).toLocaleString()}</p>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Comments */}
          <div className="bg-white rounded-lg border shadow-sm p-6">
            <h2 className="text-xl font-semibold mb-4">Comments & Updates</h2>

            <div className="space-y-4 mb-6">
              {inspection.comments.map((comment) => (
                <div key={comment.id} className="border-l-4 border-border pl-4">
                  <div className="flex items-center gap-2 mb-2">
                    <User className="w-4 h-4 text-gray-400" />
                    <span className="font-medium text-sm">{comment.author}</span>
                    <span className="text-sm text-gray-500">{new Date(comment.timestamp).toLocaleString()}</span>
                  </div>
                  <p className="text-gray-700 mb-2">{comment.content}</p>
                  {comment.attachments.length > 0 && (
                    <div className="flex gap-2">
                      {comment.attachments.map((attachment, idx) => (
                        <div key={idx} className="flex items-center gap-1 text-sm text-primary">
                          <FileText className="w-3 h-3" />
                          <span>{attachment}</span>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>

            <div className="border-t pt-4">
              <textarea
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                placeholder="Add a comment..."
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary mb-3"
                rows={3}
              />
              <button
                onClick={handleAddComment}
                className="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary/90 transition-colors"
              >
                Add Comment
              </button>
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Actions */}
          <div className="bg-white rounded-lg border shadow-sm p-6">
            <h3 className="font-semibold mb-4">Actions</h3>
            <div className="space-y-2">
              <button className="w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded">
                <Edit className="w-4 h-4 inline mr-2" />
                Edit Inspection
              </button>
              <button className="w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded">
                <FileText className="w-4 h-4 inline mr-2" />
                Generate Report
              </button>
              <button className="w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded">
                <Calendar className="w-4 h-4 inline mr-2" />
                Reschedule
              </button>
            </div>
          </div>

          {/* Related Items */}
          <div className="bg-white rounded-lg border shadow-sm p-6">
            <h3 className="font-semibold mb-4">Related Items</h3>
            <div className="space-y-3">
              <div>
                <p className="text-sm text-gray-600">Lot</p>
                <p className="font-medium">{inspection.lot_asset_id}</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">WBS Node</p>
                <p className="font-medium">{inspection.wbs_node_asset_id}</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">Location</p>
                <p className="font-medium">{inspection.lbs_node_asset_id}</p>
              </div>
            </div>
          </div>

          {/* Attachments */}
          {inspection.attachments.length > 0 && (
            <div className="bg-white rounded-lg border shadow-sm p-6">
              <h3 className="font-semibold mb-4">Attachments</h3>
              <div className="space-y-2">
                {inspection.attachments.map((attachment, index) => (
                  <div key={index} className="flex items-center gap-2 p-2 bg-gray-50 rounded">
                    <FileText className="w-4 h-4 text-gray-400" />
                    <span className="text-sm text-gray-900 flex-1">{attachment}</span>
                    <button className="text-primary hover:text-primary/80">
                      <Download className="w-4 h-4" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

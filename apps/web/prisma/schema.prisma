generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String     @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime?  @db.Timestamptz(6)
  created_at      DateTime?  @db.Timestamptz(6)
  updated_at      DateTime?  @db.Timestamptz(6)
  email           String?    @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           auth_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String        @db.Uuid
  created_at            DateTime      @db.Timestamptz(6)
  updated_at            DateTime      @db.Timestamptz(6)
  authentication_method String
  id                    String        @id(map: "amr_id_pk") @db.Uuid
  sessions              auth_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      auth_users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?        @db.Uuid
  id          BigInt         @id @default(autoincrement())
  token       String?        @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?        @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime?      @db.Timestamptz(6)
  updated_at  DateTime?      @db.Timestamptz(6)
  parent      String?        @db.VarChar(255)
  session_id  String?        @db.Uuid
  sessions    auth_sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model auth_sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@map("sessions")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model auth_users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @unique @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  user                        User?
  public_user_id              String?             @db.VarChar(255)

  @@index([instance_id])
  @@index([is_anonymous])
  @@map("users")
  @@schema("auth")
}

model Account {
  id                String       @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             auth_users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_idx")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model asset_edges {
  id                                       String    @id @db.Uuid
  from_asset_id                            String    @db.Uuid
  to_asset_id                              String    @db.Uuid
  edge_type                                String
  properties                               Json?     @default("{}")
  idempotency_key                          String?
  created_at                               DateTime? @default(now()) @db.Timestamptz(6)
  assets_asset_edges_from_asset_idToassets assets    @relation("asset_edges_from_asset_idToassets", fields: [from_asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assets_asset_edges_to_asset_idToassets   assets    @relation("asset_edges_to_asset_idToassets", fields: [to_asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([from_asset_id], map: "idx_edges_from")
  @@index([properties], map: "idx_edges_properties", type: Gin)
  @@index([to_asset_id], map: "idx_edges_to")
  @@index([edge_type], map: "idx_edges_type")
  @@index([edge_type, from_asset_id], map: "idx_edges_type_from")
  @@index([edge_type, to_asset_id], map: "idx_edges_type_to")
  @@schema("public")
}

model asset_embeddings {
  id         String                 @id @db.Uuid
  asset_id   String?                @db.Uuid
  embedding  Unsupported("vector")?
  created_at DateTime?              @default(now()) @db.Timestamptz(6)
  assets     assets?                @relation(fields: [asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([embedding], map: "idx_asset_embeddings_vec")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model assets {
  id                                            String                   @id @db.Uuid
  asset_uid                                     String                   @db.Uuid
  version                                       Int
  is_current                                    Boolean?                 @default(true)
  supersedes_asset_id                           String?                  @db.Uuid
  version_label                                 String?
  effective_from                                DateTime?                @db.Timestamptz(6)
  effective_to                                  DateTime?                @db.Timestamptz(6)
  type                                          String
  subtype                                       String?
  name                                          String
  organization_id                               String                   @db.Uuid
  project_id                                    String?                  @db.Uuid
  parent_asset_id                               String?                  @db.Uuid
  document_number                               String?
  revision_code                                 String?
  path_key                                      String?
  status                                        String?                  @default("draft")
  approval_state                                String?                  @default("not_required")
  classification                                String?                  @default("internal")
  idempotency_key                               String?
  metadata                                      Json?                    @default("{}")
  content                                       Json?                    @default("{}")
  due_sla_at                                    DateTime?                @db.Timestamptz(6)
  scheduled_at                                  DateTime?                @db.Timestamptz(6)
  requested_for_at                              DateTime?                @db.Timestamptz(6)
  created_at                                    DateTime?                @default(now()) @db.Timestamptz(6)
  created_by                                    String?                  @db.Uuid
  updated_at                                    DateTime?                @default(now()) @db.Timestamptz(6)
  updated_by                                    String?                  @db.Uuid
  is_deleted                                    Boolean?                 @default(false)
  asset_edges_asset_edges_from_asset_idToassets asset_edges[]            @relation("asset_edges_from_asset_idToassets")
  asset_edges_asset_edges_to_asset_idToassets   asset_edges[]            @relation("asset_edges_to_asset_idToassets")
  asset_embeddings                              asset_embeddings[]
  organizations                                 organizations            @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assets                                        assets?                  @relation("assetsToassets", fields: [parent_asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_assets                                  assets[]                 @relation("assetsToassets")
  projects                                      projects?                @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  correspondence_threads                        correspondence_threads[]
  documents                                     documents[]
  legal_holds                                   legal_holds[]
  retention_policies                            retention_policies[]

  @@unique([asset_uid, version], map: "uq_asset_uid_version")
  @@index([content], map: "idx_assets_content", type: Gin)
  @@index([metadata], map: "idx_assets_metadata", type: Gin)
  @@index([organization_id], map: "idx_assets_org")
  @@index([project_id], map: "idx_assets_project")
  @@index([status, approval_state], map: "idx_assets_status_approval")
  @@index([type, subtype], map: "idx_assets_type_subtype")
  @@schema("public")
}

model audit_events {
  id            String    @id @db.Uuid
  project_id    String?   @db.Uuid
  actor_user_id String?   @db.Uuid
  action        String?
  resource_type String?
  resource_id   String?   @db.Uuid
  details       Json?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([project_id], map: "idx_audit_project")
  @@index([created_at], map: "idx_audit_time")
  @@schema("public")
}

model correspondence_threads {
  id              String    @id @db.Uuid
  project_id      String?   @db.Uuid
  asset_id        String?   @db.Uuid
  thread_key      String?
  last_message_at DateTime? @db.Timestamptz(6)
  participants    String[]
  metadata        Json?     @default("{}")
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  assets          assets?   @relation(fields: [asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([project_id, thread_key])
  @@index([last_message_at], map: "idx_corr_last_message")
  @@index([project_id, thread_key], map: "idx_corr_project_thread")
  @@schema("public")
}

model documents {
  id                  String    @id @db.Uuid
  project_id          String?   @db.Uuid
  asset_id            String?   @db.Uuid
  blob_url            String?
  storage_path        String?
  file_name           String?
  content_type        String?
  size                BigInt?
  source_hash         String?
  document_number     String?
  revision_code       String?
  transmittal_number  String?
  revision_date       DateTime? @db.Timestamptz(6)
  doc_type            String?
  distribution_list   String[]
  distribution_matrix Json?     @default("{}")
  metadata            Json?     @default("{}")
  processing_status   String?   @default("uploaded")
  raw_content         String?
  structured_output   Json?     @default("{}")
  llm_scope_output    Json?     @default("{}")
  llm_summary         Json?     @default("{}")
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)
  uploaded_by         String?   @db.Uuid
  assets              assets?   @relation(fields: [asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects            projects? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model events {
  id           String    @id @db.Uuid
  project_id   String?   @db.Uuid
  source_table String?
  record_id    String?   @db.Uuid
  event_type   String?
  payload      Json?
  occurred_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([project_id], map: "idx_events_project")
  @@index([source_table], map: "idx_events_source")
  @@index([occurred_at], map: "idx_events_time")
  @@schema("public")
}

model legal_holds {
  id          String    @id @db.Uuid
  project_id  String?   @db.Uuid
  asset_id    String?   @db.Uuid
  hold_reason String?
  issued_by   String?
  issued_at   DateTime? @db.Timestamptz(6)
  status      String?
  metadata    Json?     @default("{}")
  assets      assets?   @relation(fields: [asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model organization_users {
  id              String         @id @db.Uuid
  organization_id String?        @db.Uuid
  user_id         String?        @db.Uuid
  role_id         String?        @db.Uuid
  attributes      Json?          @default("{}")
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?      @default(now()) @db.Timestamptz(6)
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles           roles?         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([organization_id, user_id])
  @@index([organization_id], map: "idx_org_users_org")
  @@schema("public")
}

model organizations {
  id                 String               @id @db.Uuid
  name               String?
  domain             String?
  metadata           Json?                @default("{}")
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  assets             assets[]
  organization_users organization_users[]
  projects           projects[]

  @@index([name], map: "idx_organizations_name")
  @@schema("public")
}

model permissions {
  id               String             @id @db.Uuid
  code             String?            @unique
  name             String?
  description      String?
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  role_permissions role_permissions[]

  @@schema("public")
}

model processing_runs {
  id               String    @id @db.Uuid
  run_uid          String?   @unique @db.Uuid
  project_id       String?   @db.Uuid
  agent_id         String?
  model            String?
  model_version    String?
  prompt_hash      String?
  params           Json?     @default("{}")
  retries          Int?      @default(0)
  latency_ms       Int?
  input_tokens     Int?
  output_tokens    Int?
  cost             Decimal?  @db.Decimal(12, 6)
  confidence       Decimal?  @db.Decimal(3, 2)
  validator_status String?
  reviewer_id      String?   @db.Uuid
  thread_id        String?
  run_id           String?
  status           String?   @default("completed")
  started_at       DateTime? @default(now()) @db.Timestamptz(6)
  ended_at         DateTime? @db.Timestamptz(6)
  projects         projects? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model project_feature_flags {
  project_id     String    @id @db.Uuid
  pack_asset_uid String?   @db.Uuid
  flags          Json?     @default("{}")
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  projects       projects  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model project_members {
  id              String      @id @db.Uuid
  project_id      String?     @db.Uuid
  user_id         String?     @db.Uuid
  role_id         String?     @db.Uuid
  permissions     String[]
  abac_attributes Json?       @default("{}")
  created_at      DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?   @default(now()) @db.Timestamptz(6)
  projects        projects?   @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles           roles?      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           auth_users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([project_id, user_id])
  @@index([abac_attributes], map: "idx_project_members_abac", type: Gin)
  @@index([project_id], map: "idx_project_members_project")
  @@schema("public")
}

model projects {
  id                    String                 @id @db.Uuid
  name                  String?
  description           String?
  location              String?
  client_name           String?
  created_by_user_id    String?                @db.Uuid
  status                String?
  created_at            DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?              @default(now()) @db.Timestamptz(6)
  organization_id       String?                @db.Uuid
  settings              Json?                  @default("{}")
  assets                assets[]
  documents             documents[]
  processing_runs       processing_runs[]
  project_feature_flags project_feature_flags?
  project_members       project_members[]
  organizations         organizations?         @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model reference_documents {
  id                String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id       Int?
  category_name     String?
  spec_id           String?
  spec_name         String?
  spec_date         String?
  document_type     String?
  is_checklist      Boolean?
  file_name         String?
  file_extension    String?
  file_size_kb      Int?
  download_url      String?
  local_path        String?
  download_date     DateTime? @db.Timestamptz(6)
  download_status   String?
  parent_spec_id    String?
  introduction_text String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  content_raw       String?
  old_id            Int?
  process_reference Json?
  synopsis          String?
  issuing_body      String?
  jurisdiction      String?
  version_info      String?
  org_identifier    String?   @db.VarChar(10)

  @@ignore
  @@schema("public")
}

model retention_policies {
  id                  String    @id @db.Uuid
  project_id          String?   @db.Uuid
  asset_id            String?   @db.Uuid
  policy_name         String?
  classification      String?
  retention_years     Int?
  legal_hold_override Boolean?  @default(false)
  metadata            Json?     @default("{}")
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  assets              assets?   @relation(fields: [asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model role_permissions {
  id            String       @id @db.Uuid
  role_id       String?      @db.Uuid
  permission_id String?      @db.Uuid
  permissions   permissions? @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles         roles?       @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([role_id, permission_id])
  @@schema("public")
}

model roles {
  id                 String               @id @db.Uuid
  code               String?              @unique
  name               String?
  description        String?
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  organization_users organization_users[]
  project_members    project_members[]
  role_permissions   role_permissions[]

  @@schema("public")
}

model Session {
  id           String       @id
  sessionToken String       @unique
  userId       String
  expires      DateTime     @db.Timestamptz(6)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken], map: "sessions_session_token_idx")
  @@index([userId], map: "sessions_user_id_idx")
  @@map("sessions")
  @@schema("public")
}

model user_subscriptions {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String    @unique @db.Uuid
  stripe_customer_id     String?   @unique
  stripe_subscription_id String?   @unique
  status                 String?   @default("inactive")
  current_period_start   DateTime? @db.Timestamptz(6)
  current_period_end     DateTime? @db.Timestamptz(6)
  cancel_at_period_end   Boolean?  @default(false)
  plan_name              String?
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at             DateTime? @default(now()) @db.Timestamptz(6)

  @@index([status], map: "idx_user_subscriptions_status")
  @@index([stripe_customer_id], map: "idx_user_subscriptions_stripe_customer")
  @@index([user_id], map: "idx_user_subscriptions_user_id")
  @@schema("public")
}

model User {
  id            String            @id
  name          String?
  email         String?           @unique
  emailVerified DateTime?         @db.Timestamptz(6)
  image         String?
  password      String?
  createdAt     DateTime?         @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?         @default(now()) @db.Timestamptz(6)
  accounts      Account[]
  sessions      Session[]
  authUser     auth_users? @relation(references: [id])

  @@map("users")
  @@schema("public")
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
  @@index([token])
  @@schema("public")
}

model webhooks_outbound {
  id           String    @id @db.Uuid
  project_id   String?   @db.Uuid
  target_url   String?
  event_filter String?
  secret       String?
  status       String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

version: "2.2"
metadata:
  description: "ProjectPro Knowledge Graph - Asset-centric architecture with Quality Core, Field Ops, HSE, Client Portal, Reports, Approvals, Email Ingest, Orchestration, and QSE corporate docs"
  created: "2025-09-04"
  scope: "Complete catalog: pages, components, APIs, actions, services, graphs, prompts, database schemas, tools, domain packs, edges, relations; rewritten to unified assets model"
  domains:
    - software
    - ai
    - qms
    - ims
    - construction
    - project_management
    - quality
    - hse
    - field_operations
    - approvals
    - email_ingest
    - gis
    - security
    - governance
    - jurisdictional_compliance
  coverage: "All Quality Core features plus Field Ops, HSE, Map, Client Portal, Reports, Approvals, Email Ingest, Orchestration; all nodes under LangGraph Server v10"
meta:
  schema_version: "catalog_enhanced.v2.2"
  generated_at: "2025-09-04T00:00:00Z"
  change_log:
    - "Refactor: unified asset-centric data model; removed specialized operational tables; assets + asset_edges are authoritative"
    - "Added assets.organization_id with invariant/trigger from projects.organization_id"
    - "Added generated timestamptz columns due_sla_at, scheduled_at, requested_for_at from content JSON"
    - "Rewrote register views over assets and asset_edges"
    - "Updated all Actions -> Tables to write via action_graph_repo to assets/asset_edges"
    - "Kept processing_runs side-table and assets(type='processing_run') linkage for provenance"
    - "Maintained per-type JSON schemas under llm.per_type_output_schemas"
    - "Strengthened idempotency and natural-key unique indexes on assets"
taxonomies:
  asset_types:
    enum:
      - project
      - document
      - drawing
      - spec
      - correspondence
      - email
      - memo
      - meeting_minute
      - rfi
      - material
      - mix_design
      - msds
      - calibration_certificate
      - batch_ticket
      - plan
      - wbs_node
      - lbs_node
      - itp_template
      - itp_document
      - lot
      - inspection_point
      - inspection_request
      - inspection_signature
      - inspection_schedule
      - test_request
      - sample
      - lab
      - test_method
      - test_result
      - measurement
      - ncr
      - risk
      - hazard
      - control
      - requirement
      - standard
      - clause
      - policy
      - procedure
      - work_instruction
      - form
      - record
      - audit
      - audit_finding
      - capa
      - incident
      - task
      - decision
      - comment
      - user
      - role
      - organization
      - geo_feature
      - photo
      - embedding
      - processing_run
      - swms
      - jsa
      - permit
      - toolbox_talk
      - safety_walk
      - induction
      - approval_workflow
      - rule
      - retention_policy
      - legal_hold
      - compliance_pack
      - project_compliance_config
      - daily_diary
      - site_instruction
      - timesheet
      - roster
      - plant_prestart
      - maintenance_record
      - utilization_log
  subtypes:
    governed_lists:
      document:
        - spec
        - method_statement
        - contract_appendix
        - safety_notice
        - email_transcript
        - transmittal
      drawing:
        - general_arrangement
        - section
        - elevation
        - detail
      wbs_node:
        - discipline
        - work_package
        - activity
      lbs_node:
        - site
        - zone
        - chainage
        - layer
        - element
      record:
        - photo
        - measurement
        - test_result
        - checklist
        - safety_observation
      incident:
        - near_miss
        - lost_time
        - quality
        - safety
      requirement:
        - regulatory
        - contractual
        - standard_clause
        - owner_requirement
      control:
        - preventive
        - detective
        - corrective
  statuses:
    enum: [draft, in_review, approved, superseded, archived, deleted]
  approval_states:
    enum: [not_required, pending_review, approved, rejected, changes_requested]
  classifications:
    enum: [public, internal, confidential, restricted]
  inspection_point_point_type:
    enum: [hold, witness, surveillance, record]
  relationship_edge_types:
    structural: [PARENT_OF, PART_OF, INSTANCE_OF, TEMPLATE_FOR, VERSION_OF, SUPERSEDES, ALIAS_OF]
    project_spatial: [BELONGS_TO_PROJECT, LOCATED_IN_LBS, COVERS_WBS, APPLIES_TO, MAPPED_TO, RELATED_TO]
    compliance_governance: [GOVERNED_BY, IMPLEMENTS, EVIDENCES, VIOLATES, SATISFIES, CONSTRAINED_BY]
    process_workflow: [APPROVED_BY, REVIEWED_BY, OWNED_BY, ASSIGNED_TO, REPORTED_BY, RESOLVED_BY, CLOSES]
    references_content: [REFERENCES, CITES, QUOTES, SUMMARIZES, EXTRACTS, ANNOTATES, TAGS]
    dependencies: [DEPENDS_ON, BLOCKED_BY, REPLACES, DUPLICATES]
    llm_context: [CONTEXT_FOR, INPUT_TO, OUTPUT_OF, GENERATED_FROM]
  catalog_edge_types:
    enum:
      - renders_component
      - calls_api
      - calls_action
      - calls_service
      - reads_table
      - writes_table
      - contains_asset_type
      - belongs_to_project
      - derived_from
      - references_standard
      - complies_with
      - fulfills_requirement
      - checked_against
      - generates_asset
      - displays_asset
      - uses_prompt
      - uses_tool
      - has_capability
      - workflow_sequence
      - implements_standard
types:
  models:
    - name: "EdgeSpec"
      fields:
        - { name: "from_asset_id", type: "uuid_string", required: true }
        - { name: "to_asset_id", type: "uuid_string", required: true }
        - { name: "edge_type", type: "enum(flatten(taxonomies.relationship_edge_types))", required: true }
        - { name: "properties", type: "object", required: true, default: {} }
        - { name: "idempotency_key", type: "string", required: false }
      validation:
        - "Edge type allowed per relationships.allowed_from_to"
        - "Required properties per allowed_from_to.required_properties present"
        - "from_asset_id != to_asset_id for non-reflexive edge types"
    - name: "IdempotentAssetWriteSpec"
      fields:
        - { name: "asset", type: "object", required: true }
        - { name: "edges", type: "EdgeSpec[]", required: false, default: [] }
        - { name: "idempotency_key", type: "string", required: true }
        - { name: "audit_context", type: "object", required: false }
      rules:
        - "Writes must route via action_graph_repo.upsertAssetsAndEdges"
        - "Classification default applied if not provided"
assets:
  logical_schema:
    fields:
      - { name: "id", type: "uuid", pk: true }
      - { name: "asset_uid", type: "uuid", required: true, description: "Stable identity across versions" }
      - { name: "version", type: "int", required: true }
      - { name: "is_current", type: "bool", default: true }
      - { name: "supersedes_asset_id", type: "uuid", nullable: true, fk: "assets.id" }
      - { name: "version_label", type: "text", nullable: true }
      - { name: "effective_from", type: "timestamptz", nullable: true }
      - { name: "effective_to", type: "timestamptz", nullable: true }
      - { name: "type", type: "enum(taxonomies.asset_types)", required: true }
      - { name: "subtype", type: "text", nullable: true }
      - { name: "name", type: "text", required: true }
      - { name: "organization_id", type: "uuid", fk: "organizations.id", required: true }
      - { name: "project_id", type: "uuid", fk: "projects.id", nullable: true }
      - { name: "parent_asset_id", type: "uuid", fk: "assets.id", nullable: true }
      - { name: "document_number", type: "text", nullable: true }
      - { name: "revision_code", type: "text", nullable: true }
      - { name: "path_key", type: "text", nullable: true }
      - { name: "status", type: "enum(taxonomies.statuses)", default: "draft" }
      - { name: "approval_state", type: "enum(taxonomies.approval_states)", default: "not_required" }
      - { name: "classification", type: "enum(taxonomies.classifications)", default: "internal" }
      - { name: "idempotency_key", type: "text", nullable: true }
      - { name: "metadata", type: "jsonb", default: "{}" }
      - { name: "content", type: "jsonb", default: "{}" }
      - { name: "due_sla_at", type: "timestamptz generated", expression: "(NULLIF(content->>'sla_due_at',''))::timestamptz" }
      - { name: "scheduled_at", type: "timestamptz generated", expression: "(NULLIF(content->>'scheduled_at',''))::timestamptz" }
      - { name: "requested_for_at", type: "timestamptz generated", expression: "(NULLIF(content->>'requested_for',''))::timestamptz" }
      - { name: "created_at", type: "timestamptz", default: "now()" }
      - { name: "created_by", type: "uuid", fk: "auth.users.id", nullable: true }
      - { name: "updated_at", type: "timestamptz", default: "now()" }
      - { name: "updated_by", type: "uuid", fk: "auth.users.id", nullable: true }
      - { name: "is_deleted", type: "bool", default: false }
    constraints:
      - "PRIMARY KEY (id)"
      - "UNIQUE (asset_uid, version)"
      - "UNIQUE (asset_uid) WHERE is_current"
      - "UNIQUE (project_id, type, idempotency_key) WHERE idempotency_key IS NOT NULL"
      - "CHECK (type IN (SELECT unnest(ARRAY['project','document','drawing','spec','correspondence','email','memo','meeting_minute','rfi','material','mix_design','msds','calibration_certificate','batch_ticket','plan','wbs_node','lbs_node','itp_template','itp_document','lot','inspection_point','inspection_request','inspection_signature','inspection_schedule','test_request','sample','lab','test_method','test_result','measurement','ncr','risk','hazard','control','requirement','standard','clause','policy','procedure','work_instruction','form','record','audit','audit_finding','capa','incident','task','decision','comment','user','role','organization','geo_feature','photo','embedding','processing_run','swms','jsa','permit','toolbox_talk','safety_walk','induction','approval_workflow','rule','retention_policy','legal_hold','compliance_pack','project_compliance_config','daily_diary','site_instruction','timesheet','roster','plant_prestart','maintenance_record','utilization_log']::text[])))"
    invariants:
      - "organization_id must equal projects.organization_id when project_id is set (enforced by trigger)"
      - "Immutable versioning: updates create new version rows; is_current single head per asset_uid"
      - "BELONGS_TO_PROJECT edges are derived and can be regenerated"
    natural_keys:
      - for: "document|drawing|spec"
        keys: ["COALESCE(project_id::text,'-')", "COALESCE(document_number,'-')", "COALESCE(revision_code,'-')"]
      - for: "wbs_node|lbs_node"
        keys: ["COALESCE(project_id::text,'-')", "COALESCE(path_key,'-')"]
      - for: "test_method"
        keys: ["COALESCE(project_id::text,'-')", "COALESCE((content->>'code'),'-')"]
    indexes:
      - "btree (organization_id)"
      - "btree (project_id)"
      - "btree (type, subtype)"
      - "btree (status, approval_state)"
      - "btree (due_sla_at) WHERE type IN ('inspection_request','inspection_point','test_request')"
      - "btree (scheduled_at) WHERE type IN ('inspection_request','inspection_schedule')"
      - "btree (requested_for_at) WHERE type IN ('inspection_request')"
      - "GIN (metadata)"
      - "GIN (content)"
      - "GIN (content) WHERE type='inspection_point'"
      - "GIN (content) WHERE type='test_result'"
      - "UNIQUE (project_id, path_key) WHERE type IN ('wbs_node','lbs_node')"
      - "UNIQUE (document_number, revision_code) WHERE type IN ('document','spec','drawing')"
asset_edges:
  logical_schema:
    fields:
      - { name: "id", type: "uuid", pk: true }
      - { name: "from_asset_id", type: "uuid", fk: "assets.id", required: true }
      - { name: "to_asset_id", type: "uuid", fk: "assets.id", required: true }
      - { name: "edge_type", type: "enum(flatten(taxonomies.relationship_edge_types))", required: true }
      - { name: "properties", type: "jsonb", default: "{}" }
      - { name: "idempotency_key", type: "text", nullable: true }
      - { name: "created_at", type: "timestamptz", default: "now()" }
    constraints:
      - "PRIMARY KEY (id)"
      - "FOREIGN KEY (from_asset_id) REFERENCES assets(id)"
      - "FOREIGN KEY (to_asset_id) REFERENCES assets(id)"
      - "CHECK (edge_type IN ('PARENT_OF','PART_OF','INSTANCE_OF','TEMPLATE_FOR','VERSION_OF','SUPERSEDES','ALIAS_OF','BELONGS_TO_PROJECT','LOCATED_IN_LBS','COVERS_WBS','APPLIES_TO','MAPPED_TO','RELATED_TO','GOVERNED_BY','IMPLEMENTS','EVIDENCES','VIOLATES','SATISFIES','CONSTRAINED_BY','APPROVED_BY','REVIEWED_BY','OWNED_BY','ASSIGNED_TO','REPORTED_BY','RESOLVED_BY','CLOSES','REFERENCES','CITES','QUOTES','SUMMARIZES','EXTRACTS','ANNOTATES','TAGS','DEPENDS_ON','BLOCKED_BY','REPLACES','DUPLICATES','CONTEXT_FOR','INPUT_TO','OUTPUT_OF','GENERATED_FROM'))"
      - "UNIQUE (edge_type, idempotency_key) WHERE idempotency_key IS NOT NULL"
    indexes:
      - "btree (from_asset_id)"
      - "btree (to_asset_id)"
      - "btree (edge_type)"
      - "btree (edge_type, from_asset_id)"
      - "btree (edge_type, to_asset_id)"
      - "GIN (properties)"
    invariants:
      - "PARENT_OF acyclic; enforced by path-check trigger"
      - "BELONGS_TO_PROJECT: at most one per asset; derived from asset.project_id"
      - "MAPPED_TO only wbs_node <-> lbs_node; properties must include strength[0..1], rationale"
      - "APPROVED_BY/REVIEWED_BY: to must be user|role asset; timestamps required on properties"
      - "CONTEXT_FOR/INPUT_TO/OUTPUT_OF: one vertex must be processing_run asset"
      - "BLOCKED_BY: lot|itp_document blocked by inspection_point|control|procedure|policy; if inspection_point then content.point_type='hold'"
processing_runs:
  fields:
    - { name: "id", type: "uuid", pk: true }
    - { name: "run_uid", type: "uuid", unique: true }
    - { name: "project_id", type: "uuid", fk: "projects.id", nullable: true }
    - { name: "agent_id", type: "text" }
    - { name: "model", type: "text" }
    - { name: "model_version", type: "text", nullable: true }
    - { name: "prompt_hash", type: "text" }
    - { name: "params", type: "jsonb", default: "{}", description: "{temperature, top_p, max_tokens, seed, stop}" }
    - { name: "retries", type: "int", default: 0 }
    - { name: "latency_ms", type: "int", nullable: true }
    - { name: "input_tokens", type: "int", nullable: true }
    - { name: "output_tokens", type: "int", nullable: true }
    - { name: "cost", type: "numeric(12,6)", nullable: true }
    - { name: "confidence", type: "numeric(3,2)", nullable: true }
    - { name: "validator_status", type: "text", nullable: true }
    - { name: "reviewer_id", type: "uuid", fk: "auth.users.id", nullable: true }
    - { name: "thread_id", type: "text", nullable: true }
    - { name: "run_id", type: "text", nullable: true }
    - { name: "status", type: "text", default: "completed" }
    - { name: "started_at", type: "timestamptz", default: "now()" }
    - { name: "ended_at", type: "timestamptz", nullable: true }
  edges_usage:
    - "Assets that fed the run: INPUT_TO (asset -> processing_run asset)"
    - "Assets produced by the run: OUTPUT_OF (generated asset <- processing_run asset)"
documents:
  fields:
    - { name: "id", type: "uuid", pk: true }
    - { name: "project_id", type: "uuid", fk: "projects.id", nullable: true }
    - { name: "asset_id", type: "uuid", fk: "assets.id", nullable: true }
    - { name: "blob_url", type: "text" }
    - { name: "storage_path", type: "text" }
    - { name: "file_name", type: "text" }
    - { name: "content_type", type: "text", nullable: true }
    - { name: "size", type: "bigint", nullable: true }
    - { name: "source_hash", type: "text", nullable: true }
    - { name: "document_number", type: "text", nullable: true }
    - { name: "revision_code", type: "text", nullable: true }
    - { name: "transmittal_number", type: "text", nullable: true }
    - { name: "revision_date", type: "timestamptz", nullable: true }
    - { name: "doc_type", type: "text", nullable: true }
    - { name: "distribution_list", type: "text[]", nullable: true }
    - { name: "distribution_matrix", type: "jsonb", default: "{}" }
    - { name: "metadata", type: "jsonb", default: "{}" }
    - { name: "processing_status", type: "text", default: "uploaded" }
    - { name: "raw_content", type: "text", nullable: true }
    - { name: "structured_output", type: "jsonb", default: "{}" }
    - { name: "llm_scope_output", type: "jsonb", default: "{}" }
    - { name: "llm_summary", type: "jsonb", default: "{}" }
    - { name: "created_at", type: "timestamptz", default: "now()" }
    - { name: "updated_at", type: "timestamptz", default: "now()" }
    - { name: "uploaded_by", type: "uuid", fk: "auth.users.id", nullable: true }
  constraints:
    - "PRIMARY KEY (id)"
    - "FOREIGN KEY (project_id) REFERENCES projects(id)"
    - "FOREIGN KEY (asset_id) REFERENCES assets(id)"
    - "UNIQUE (project_id, source_hash) WHERE source_hash IS NOT NULL"
    - "UNIQUE (document_number, revision_code) WHERE document_number IS NOT NULL AND revision_code IS NOT NULL"
    - "UNIQUE (transmittal_number) WHERE transmittal_number IS NOT NULL"
asset_embeddings:
  fields:
    - { name: "id", type: "uuid", pk: true }
    - { name: "asset_id", type: "uuid", fk: "assets.id" }
    - { name: "embedding", type: "vector(1536)" }
    - { name: "created_at", type: "timestamptz", default: "now()" }
  indexes:
    - "ivfflat (embedding) WITH (lists=100)"
relationships:
  vocabulary:
    categories:
      structural: "PARENT_OF, PART_OF, INSTANCE_OF, TEMPLATE_FOR, VERSION_OF, SUPERSEDES, ALIAS_OF"
      project_spatial: "BELONGS_TO_PROJECT, LOCATED_IN_LBS, COVERS_WBS, APPLIES_TO, MAPPED_TO, RELATED_TO"
      compliance_governance: "GOVERNED_BY, IMPLEMENTS, EVIDENCES, VIOLATES, SATISFIES, CONSTRAINED_BY"
      process_workflow: "APPROVED_BY, REVIEWED_BY, OWNED_BY, ASSIGNED_TO, REPORTED_BY, RESOLVED_BY, CLOSES"
      references_content: "REFERENCES, CITES, QUOTES, SUMMARIZES, EXTRACTS, ANNOTATES, TAGS"
      dependencies: "DEPENDS_ON, BLOCKED_BY, REPLACES, DUPLICATES"
      llm_context: "CONTEXT_FOR, INPUT_TO, OUTPUT_OF, GENERATED_FROM"
  allowed_from_to:
    - { edge_type: "PARENT_OF", from: ["wbs_node", "lbs_node", "document", "itp_document", "plan"], to: ["wbs_node", "lbs_node", "document", "inspection_point", "plan"] }
    - { edge_type: "BELONGS_TO_PROJECT", from: ["*"], to: ["project"], cardinality: "many_to_one", derived: true }
    - { edge_type: "MAPPED_TO", from: ["wbs_node"], to: ["lbs_node"], cardinality: "many_to_many", required_properties: ["strength", "rationale"] }
    - { edge_type: "IMPLEMENTS", from: ["procedure", "control", "inspection_request", "project_compliance_config"], to: ["requirement", "itp_document", "compliance_pack"] }
    - { edge_type: "EVIDENCES", from: ["record","photo","measurement","test_result","inspection_request","batch_ticket","calibration_certificate","sample","test_request"], to: ["requirement","itp_document","lot","incident"], required_properties: ["source", "timestamp"] }
    - { edge_type: "APPROVED_BY", from: ["document", "itp_template", "policy", "procedure", "inspection_signature", "approval_workflow", "inspection_point"], to: ["user", "role"], required_properties: ["approved_at"] }
    - { edge_type: "REVIEWED_BY", from: ["document", "itp_template", "policy", "procedure", "inspection_request", "inspection_point"], to: ["user", "role"], required_properties: ["reviewed_at"] }
    - { edge_type: "CONTEXT_FOR", from: ["*"], to: ["processing_run"] }
    - { edge_type: "INPUT_TO", from: ["*"], to: ["processing_run"] }
    - { edge_type: "OUTPUT_OF", from: ["*"], to: ["processing_run"] }
    - { edge_type: "GENERATED_FROM", from: ["*"], to: ["*"] }
    - { edge_type: "LOCATED_IN_LBS", from: ["inspection_request","test_request","sample","daily_diary","site_instruction","plant_prestart","maintenance_record","incident","geo_feature"], to: ["lbs_node"] }
    - { edge_type: "COVERS_WBS", from: ["inspection_request","test_request"], to: ["wbs_node"] }
    - { edge_type: "BLOCKED_BY", from: ["lot","itp_document"], to: ["inspection_point","control","procedure","policy"], required_properties: ["reason"] }
    - { edge_type: "CLOSES", from: ["capa"], to: ["incident"], required_properties: ["closed_at"] }
    - { edge_type: "RESOLVED_BY", from: ["incident"], to: ["user"], required_properties: ["resolved_at"] }
    - { edge_type: "REFERENCES", from: ["correspondence","rfi","inspection_point","document"], to: ["drawing","spec","itp_document","document","itp_template"], required_properties: ["reference_type"] }
  invariants:
    - "PARENT_OF must be acyclic; one path to root per hierarchy"
    - "BELONGS_TO_PROJECT edges are derived and may be regenerated"
    - "Approval edges required before approval_state transitions"
    - "EVIDENCES target.type limited to ['requirement','itp_document','lot','incident']"
    - "Gating: block lot completion on unreleased hold points; enforce ITP endorsement (NSW packs); AU/NATA lab accreditation checks; NSW primary testing contract existence; QLD RQ number checks; block practical completion until RMP delivered when enabled"
llm:
  storage_contract:
    location: "assets.metadata.llm_outputs[<purpose>]"
    required_meta_per_output:
      - "schema_version"
      - "generated_at"
      - "validation: { passed:boolean, issues:string[], confidence:number }"
    processing_run_vertex:
      asset_type: "processing_run"
      linkage: "persist as asset(type='processing_run') and optional row in processing_runs for analytics; connect via edges"
    link_processing_run: "asset_edges: OUTPUT_OF (generated asset <- processing_run asset), INPUT_TO (input asset -> processing_run asset)"
    persist:
      required_fields: ["model", "model_version", "agent_id", "prompt_hash", "params", "retries", "latency_ms", "input_tokens", "output_tokens", "cost", "confidence", "validator_status", "reviewer_id"]
      params_fields: ["temperature", "top_p", "max_tokens", "seed", "stop"]
      write_contract:
        - "All graphs return IdempotentAssetWriteSpec-compatible outputs; action_graph_repo enforces invariants and writes"
        - "Include idempotency_key for assets and edges; repo performs upsert-by-idempotency"
  per_type_output_schemas:
    document:
      summary: { short: "string", executive: "string", technical: "string", audience: "string", tone: "string" }
      outline: [ { level: "int", title: "string", page_range: "string" } ]
      entities: { organizations: ["string"], persons: ["string"], materials: ["string"], equipment: ["string"], standards: ["string"], clauses: ["string"], locations: ["string"], wbs_refs: ["string"], lbs_refs: ["string"] }
      requirements: [ { id: "string", text: "string", source_clause: "string", mandatory: "bool", applicability_tags: ["string"] } ]
      controls: [ { id: "string", text: "string", type: "string", maps_to_requirements: ["string"] } ]
      hazards_risks: [ { hazard: "string", context: "string", severity: "string", likelihood: "string", risk_rating: "string", controls: ["string"] } ]
      tasks: [ { step_no: "int", description: "string", prerequisites: ["string"], acceptance_criteria: ["string"] } ]
      metrics: [ { name: "string", value: "number|string", unit: "string", method: "string" } ]
      decisions_actions: { decisions: ["string"], actions: ["string"] }
      citations: [ { ref_id: "string", title: "string", location: "string" } ]
      anomalies: [ { type: "string", span: "string", note: "string" } ]
      extraction_meta: { schema_version: "string", quality_checks: ["string"], warnings: ["string"] }
    wbs_node:
      inferred_scope: "string"
      deliverables: ["string"]
      resources: ["string"]
      risks: ["string"]
      acceptance_criteria: ["string"]
      related_requirements: ["string"]
    lbs_node:
      location_tags: ["string"]
      coordinates: { lat: "number", lon: "number" }
      geohash: "string"
      site_features: ["string"]
    itp_template:
      applicability_notes: "string"
      checkpoints: ["string"]
      acceptance_criteria: ["string"]
      required_records: ["string"]
    itp_document:
      endorsement_required: "boolean"
      endorsement_roles: ["string"]
      coverage_summary: "string"
      itp_items: ["string"]
    lot:
      quality_risks: ["string"]
      test_matrix: ["string"]
      evidence_gaps: ["string"]
      lot_number: "string"
      status: "string"
      itp_document_asset_id: "string"
      lbs_node_asset_id: "string"
    requirement:
      normalized_text: "string"
      clause_paths: ["string"]
      applicability_tags: ["string"]
      conflicting_requirements: ["string"]
    record:
      metrics: [ { name: "string", value: "number|string", unit: "string", method: "string" } ]
      anomalies: ["string"]
      link_quality: "string"
    inspection_request:
      checkpoint_id: "string"
      lot_asset_id: "string"
      wbs_node_asset_id: "string"
      lbs_node_asset_id: "string"
      sla_hours: "number"
      requested_for: "string"
      scheduled_at: "string"
      acceptance_notes: "string"
    inspection_signature:
      role_at_signing: "string"
      signature_data: "string"
      signed_at: "string"
      signed_by_user_asset_id: "string"
    inspection_schedule:
      inspector_user_asset_id: "string"
      window_start: "string"
      window_end: "string"
      status: "string"
      notes: "string"
    test_request:
      lot_asset_id: "string"
      test_method_code: "string"
      sla_due_at: "string"
      lab_asset_id: "string"
      samples_expected: "number"
    sample:
      sample_id: "string"
      chain_of_custody: "string"
      location_ref: "string"
      collected_at: "string"
      test_request_asset_id: "string"
    lab:
      name: "string"
      accreditation_no: "string"
      nata_scope_url: "string"
      accreditation_expiry: "string"
      ilac_mra_member: "boolean"
    test_method:
      code: "string"
      name: "string"
      spec_reference: "string"
      acceptance_criteria: "object"
    swms:
      hazards: ["string"]
      controls: ["string"]
      roles_required: ["string"]
      expiry_date: "string"
    incident:
      category: "string"
      severity: "string"
      root_cause_method: "string"
      root_cause: "string"
      corrective_actions: ["string"]
      verification: "string"
    daily_diary:
      date: "string"
      weather: "string"
      crews: ["string"]
      activities: ["string"]
      issues: ["string"]
      photos: ["string"]
    test_result:
      test_method_code: "string"
      method_version: "string"
      nata_endorsed: "boolean"
      lab_asset_id: "string"
      sample_asset_id: "string"
      lot_asset_id: "string"
      rq_number: "string"
      result_values: "object"
      characteristic_calc: "object"
      pass_fail: "string"
      report_id: "string"
      report_date: "string"
      lab_accreditation_snapshot: "object"
      test_conditions: "object"
      measurement_uncertainty: "object"
      attachments: ["string"]
    inspection_point:
      code: "string"
      title: "string"
      itp_item_ref: "string"
      point_type: "enum(taxonomies.inspection_point_point_type)"
      jurisdiction_rule_ref: "string"
      sla_due_at: "string"
      notified_at: "string"
      released_at: "string"
    email:
      thread_key: "string"
      message_id: "string"
      in_reply_to: "string"
      subject: "string"
      participants: ["string"]
      references_asset_ids: ["string"]
  validation:
    json_schema_refs:
      - "schemas/document_output.json"
      - "schemas/wbs_node_output.json"
      - "schemas/lbs_node_output.json"
      - "schemas/itp_template_output.json"
      - "schemas/itp_document_output.json"
      - "schemas/lot_output.json"
      - "schemas/requirement_output.json"
      - "schemas/record_output.json"
      - "schemas/inspection_request_output.json"
      - "schemas/inspection_signature_output.json"
      - "schemas/inspection_schedule_output.json"
      - "schemas/test_request_output.json"
      - "schemas/sample_output.json"
      - "schemas/lab_output.json"
      - "schemas/test_method_output.json"
      - "schemas/swms_output.json"
      - "schemas/incident_output.json"
      - "schemas/daily_diary_output.json"
      - "schemas/test_result_output.json"
      - "schemas/inspection_point_output.json"
      - "schemas/email_output.json"
    confidence_thresholds:
      default: 0.65
      document_summary: 0.7
      requirement_normalized_text: 0.8
      conformance_check: 0.8
    retry_policy:
      max_retries: 2
      backoff_ms: 1500
      cascade_models: ["gpt-4o", "gpt-4.1-mini", "gpt-4o-mini"]
versioning:
  model: "Single-table immutable versioning in assets"
  rules:
    - "Every version = one row; assets.asset_uid stable across versions"
    - "supersedes_asset_id references prior version row"
    - "Edges SUPERSEDES and VERSION_OF materialize version graph"
  views:
    - name: "asset_heads"
      definition: "SELECT * FROM assets WHERE is_current AND NOT is_deleted"
    - name: "asset_history"
      definition: "SELECT asset_uid, id, version, supersedes_asset_id, is_current, created_at, status FROM assets ORDER BY asset_uid, version"
  benefits: "Simplified queries, full lineage, strong idempotency"
identity:
  dedupe_strategy:
    - "Upsert by natural keys where applicable (document_number+revision_code, path_key, source_hash)"
    - "If duplicate natural key detected, mark previous is_current=false and create new version with supersedes linkage"
    - "Use asset_edges ALIAS_OF to record known aliases"
  idempotency:
    - "All graph writes include idempotency_key; repo upserts on (project_id,type,idempotency_key)"
    - "Edges use idempotency_key to prevent duplicates; unique on (edge_type, idempotency_key)"
indexes:
  recommendations:
    - "GIN on assets.metadata"
    - "GIN on assets.content"
    - "Partial GIN on assets(content) WHERE type IN ('inspection_point','test_result')"
    - "btree on assets (organization_id, project_id, type, subtype, status, approval_state)"
    - "btree on assets (due_sla_at) WHERE type IN ('inspection_request','inspection_point','test_request')"
    - "btree on assets (scheduled_at) WHERE type IN ('inspection_request','inspection_schedule')"
    - "btree on assets (requested_for_at) WHERE type IN ('inspection_request')"
    - "Partial unique: UNIQUE (asset_uid) WHERE is_current"
    - "Partial unique: UNIQUE (project_id, path_key) WHERE type IN ('wbs_node','lbs_node')"
    - "Partial unique: UNIQUE (document_number, revision_code) WHERE type IN ('document','spec','drawing')"
    - "Unique idempotency: UNIQUE (project_id, type, idempotency_key) WHERE idempotency_key IS NOT NULL"
    - "Composite: asset_edges(edge_type, from_asset_id) and asset_edges(edge_type, to_asset_id)"
    - "GIN on asset_edges.properties"
    - "pgvector on asset_embeddings.embedding"
routes:
  canonical:
    pages:
      - { name: "home", pattern: "/" }
      - { name: "about", pattern: "/about" }
      - { name: "pricing", pattern: "/pricing" }
      - { name: "contact", pattern: "/contact" }
      - { name: "security", pattern: "/security" }
      - { name: "privacy", pattern: "/legal/privacy" }
      - { name: "terms", pattern: "/legal/terms" }
      - { name: "auth_login", pattern: "/auth/login" }
      - { name: "auth_subscription_required", pattern: "/auth/subscription/required" }
      - { name: "auth_subscription_sync", pattern: "/auth/subscription/sync" }
      - { name: "account", pattern: "/app/account" }
      - { name: "dashboard", pattern: "/app/dashboard" }
      - { name: "projects", pattern: "/app/projects" }
      - { name: "project_overview", pattern: "/app/projects/[projectId]/overview" }
      - { name: "project_documents", pattern: "/app/projects/[projectId]/documents" }
      - { name: "project_wbs", pattern: "/app/projects/[projectId]/wbs" }
      - { name: "project_lbs", pattern: "/app/projects/[projectId]/lbs" }
      - { name: "itp_templates", pattern: "/app/projects/[projectId]/quality/itp-templates" }
      - { name: "itp_documents", pattern: "/app/projects/[projectId]/quality/itp" }
      - { name: "project_settings", pattern: "/app/projects/[projectId]/settings" }
      - { name: "quality_lots", pattern: "/app/projects/[projectId]/quality/lots" }
      - { name: "quality_hold_witness", pattern: "/app/projects/[projectId]/quality/hold-witness" }
      - { name: "quality_itp_register", pattern: "/app/projects/[projectId]/quality/itp-register" }
      - { name: "quality_records", pattern: "/app/projects/[projectId]/quality/records" }
      - { name: "quality_primary_testing", pattern: "/app/projects/[projectId]/quality/primary-testing" }
      - { name: "inspections", pattern: "/app/projects/[projectId]/inspections" }
      - { name: "inspection_detail", pattern: "/app/projects/[projectId]/inspections/[irId]" }
      - { name: "materials", pattern: "/app/projects/[projectId]/materials" }
      - { name: "mix_designs", pattern: "/app/projects/[projectId]/mix-designs" }
      - { name: "certificates", pattern: "/app/projects/[projectId]/certificates" }
      - { name: "tests", pattern: "/app/projects/[projectId]/tests" }
      - { name: "samples", pattern: "/app/projects/[projectId]/samples" }
      - { name: "methods", pattern: "/app/projects/[projectId]/methods" }
      - { name: "lot_closeout", pattern: "/app/projects/[projectId]/lots/[lotId]/closeout" }
      - { name: "hse_swms", pattern: "/app/projects/[projectId]/hse/swms" }
      - { name: "hse_permits", pattern: "/app/projects/[projectId]/hse/permits" }
      - { name: "hse_toolbox", pattern: "/app/projects/[projectId]/hse/toolbox-talks" }
      - { name: "hse_safety_walks", pattern: "/app/projects/[projectId]/hse/safety-walks" }
      - { name: "hse_inductions", pattern: "/app/projects/[projectId]/hse/inductions" }
      - { name: "hse_incidents", pattern: "/app/projects/[projectId]/hse/incidents" }
      - { name: "hse_capa", pattern: "/app/projects/[projectId]/hse/capa" }
      - { name: "field_daily_diaries", pattern: "/app/projects/[projectId]/field/daily-diaries" }
      - { name: "field_site_instructions", pattern: "/app/projects/[projectId]/field/site-instructions" }
      - { name: "field_timesheets", pattern: "/app/projects/[projectId]/field/timesheets" }
      - { name: "field_roster", pattern: "/app/projects/[projectId]/field/roster" }
      - { name: "field_plant", pattern: "/app/projects/[projectId]/field/plant" }
      - { name: "approvals_designer", pattern: "/app/projects/[projectId]/approvals/designer" }
      - { name: "approvals_inbox", pattern: "/app/projects/[projectId]/approvals/inbox" }
      - { name: "project_inbox", pattern: "/app/projects/[projectId]/inbox" }
      - { name: "map", pattern: "/app/projects/[projectId]/map" }
      - { name: "reports", pattern: "/app/projects/[projectId]/reports" }
      - { name: "client_projects", pattern: "/portal/projects" }
      - { name: "client_dashboard", pattern: "/portal/projects/[projectId]/dashboard" }
      - { name: "client_details", pattern: "/portal/projects/[projectId]/details" }
      - { name: "client_documents", pattern: "/portal/projects/[projectId]/documents" }
      - { name: "client_itp_templates", pattern: "/portal/projects/[projectId]/itp-templates" }
      - { name: "client_lots", pattern: "/portal/projects/[projectId]/lots" }
      - { name: "client_ncrs", pattern: "/portal/projects/[projectId]/ncrs" }
      - { name: "client_pending_approvals", pattern: "/portal/projects/[projectId]/pending-approvals" }
      - { name: "client_management_plans", pattern: "/portal/projects/[projectId]/management-plans" }
      - { name: "client_wbs", pattern: "/portal/projects/[projectId]/wbs" }
      - { name: "qse_home", pattern: "/app/qse" }
      - { name: "qse_corp_tier_1", pattern: "/app/qse/corporate-tier-1" }
      - { name: "qse_corp_policy_roles", pattern: "/app/qse/corp-policy-roles" }
      - { name: "qse_corp_planning", pattern: "/app/qse/corp-planning" }
      - { name: "qse_corp_operation", pattern: "/app/qse/corp-operation" }
      - { name: "qse_corp_op_procedures_templates", pattern: "/app/qse/corp-op-procedures-templates" }
      - { name: "qse_corp_support", pattern: "/app/qse/corp-support" }
      - { name: "qse_corp_risk_management", pattern: "/app/qse/corp-risk-management" }
      - { name: "qse_corp_review", pattern: "/app/qse/corp-review" }
      - { name: "qse_corp_performance", pattern: "/app/qse/corp-performance" }
      - { name: "qse_corp_monitoring", pattern: "/app/qse/corp-monitoring" }
      - { name: "qse_corp_improvement", pattern: "/app/qse/corp-improvement" }
      - { name: "qse_corp_continual_improvement", pattern: "/app/qse/corp-continual-improvement" }
      - { name: "qse_corp_objectives", pattern: "/app/qse/corp-objectives" }
      - { name: "qse_corp_documentation", pattern: "/app/qse/corp-documentation" }
      - { name: "qse_corp_communication", pattern: "/app/qse/corp-communication" }
      - { name: "qse_corp_consultation", pattern: "/app/qse/corp-consultation" }
      - { name: "qse_corp_competence", pattern: "/app/qse/corp-competence" }
      - { name: "qse_corp_leadership", pattern: "/app/qse/corp-leadership" }
      - { name: "qse_corp_legal", pattern: "/app/qse/corp-legal" }
      - { name: "qse_corp_ncr", pattern: "/app/qse/corp-ncr" }
      - { name: "qse_corp_context", pattern: "/app/qse/corp-context" }
    api:
      - { name: "auth_oauth_callback", pattern: "/api/v1/auth/providers/[provider]/callback" }
      - { name: "projects", pattern: "/api/v1/projects" }
      - { name: "project_upload_urls", pattern: "/api/v1/projects/[projectId]/uploads/azure-sas" }
      - { name: "project_uploads_complete", pattern: "/api/v1/projects/[projectId]/uploads/complete" }
      - { name: "project_ai_stream", pattern: "/api/v1/projects/[projectId]/ai/streams" }
      - { name: "project_ai_raw_stream", pattern: "/api/v1/projects/[projectId]/ai/streams/raw" }
      - { name: "project_processing_status", pattern: "/api/v1/projects/[projectId]/ai/status" }
      - { name: "project_plans", pattern: "/api/v1/projects/[projectId]/plans" }
      - { name: "assets", pattern: "/api/v1/assets" }
      - { name: "documents", pattern: "/api/v1/documents" }
      - { name: "itp", pattern: "/api/v1/itp" }
      - { name: "itp_generate", pattern: "/api/v1/projects/[projectId]/itp/generate" }
      - { name: "qse", pattern: "/api/v1/qse" }
      - { name: "qse_doc", pattern: "/api/v1/qse/[docId]" }
      - { name: "billing_checkout", pattern: "/api/v1/billing/checkout-session" }
      - { name: "webhooks_stripe", pattern: "/api/v1/webhooks/stripe" }
      - { name: "system_debug", pattern: "/api/v1/system/debug" }
      - { name: "auth_check_redirect_status", pattern: "/api/v1/auth/check-redirect-status" }
      - { name: "billing_subscription_status", pattern: "/api/v1/billing/subscription-status" }
      - { name: "system_webhook_status", pattern: "/api/v1/system/webhook-status" }
      - { name: "system_protected_test", pattern: "/api/v1/system/protected-test" }
      - { name: "inspections", pattern: "/api/v1/inspections" }
      - { name: "materials", pattern: "/api/v1/materials" }
      - { name: "tests", pattern: "/api/v1/tests" }
      - { name: "lot_closeout", pattern: "/api/v1/projects/[projectId]/lots/[lotId]/closeout" }
      - { name: "hse", pattern: "/api/v1/hse" }
      - { name: "daily_diaries", pattern: "/api/v1/field/daily-diaries" }
      - { name: "site_instructions", pattern: "/api/v1/field/site-instructions" }
      - { name: "timesheets", pattern: "/api/v1/field/timesheets" }
      - { name: "roster", pattern: "/api/v1/field/roster" }
      - { name: "plant", pattern: "/api/v1/field/plant" }
      - { name: "approvals_workflows", pattern: "/api/v1/approvals/workflows" }
      - { name: "email_ingest", pattern: "/api/v1/email/ingest" }
      - { name: "map", pattern: "/api/v1/gis" }
      - { name: "reports", pattern: "/api/v1/reports" }
      - { name: "quality_lots", pattern: "/api/v1/projects/[projectId]/quality/lots" }
      - { name: "quality_hold_witness", pattern: "/api/v1/projects/[projectId]/quality/hold-witness" }
      - { name: "quality_itp_register", pattern: "/api/v1/projects/[projectId]/quality/itp" }
      - { name: "quality_records", pattern: "/api/v1/projects/[projectId]/quality/records" }
      - { name: "compliance_config", pattern: "/api/v1/projects/[projectId]/compliance/config" }
      - { name: "quality_primary_testing", pattern: "/api/v1/projects/[projectId]/quality/primary-testing" }
  migration_map:
    - { from: "/login", to: "/auth/login" }
    - { from: "/subscription-required", to: "/auth/subscription/required" }
    - { from: "/subscription-sync", to: "/auth/subscription/sync" }
    - { from: "/account", to: "/app/account" }
    - { from: "/dashboard", to: "/app/dashboard" }
    - { from: "/projects", to: "/app/projects" }
    - { from: "/projects/[projectId]", to: "/app/projects/[projectId]/overview" }
    - { from: "/projects/[projectId]/documents", to: "/app/projects/[projectId]/documents" }
    - { from: "/projects/[projectId]/wbs", to: "/app/projects/[projectId]/wbs" }
    - { from: "/projects/[projectId]/lots", to: "/app/projects/[projectId]/lbs" }
    - { from: "/projects/[projectId]/itp-templates", to: "/app/projects/[projectId]/quality/itp-templates" }
    - { from: "/projects/[projectId]/itp", to: "/app/projects/[projectId]/quality/itp" }
    - { from: "/projects/[projectId]/details", to: "/app/projects/[projectId]/settings" }
    - { from: "/projects/[projectId]/quality/lots", to: "/app/projects/[projectId]/quality/lots" }
    - { from: "/projects/[projectId]/quality/hold-witness", to: "/app/projects/[projectId]/quality/hold-witness" }
    - { from: "/projects/[projectId]/quality/itp", to: "/app/projects/[projectId]/quality/itp-register" }
    - { from: "/projects/[projectId]/quality/records", to: "/app/projects/[projectId]/quality/records" }
    - { from: "/projects/[projectId]/quality/primary-testing", to: "/app/projects/[projectId]/quality/primary-testing" }
    - { from: "/projects/[projectId]/inspections", to: "/app/projects/[projectId]/inspections" }
    - { from: "/projects/[projectId]/inspections/[irId]", to: "/app/projects/[projectId]/inspections/[irId]" }
    - { from: "/projects/[projectId]/materials", to: "/app/projects/[projectId]/materials" }
    - { from: "/projects/[projectId]/mix-designs", to: "/app/projects/[projectId]/mix-designs" }
    - { from: "/projects/[projectId]/certificates", to: "/app/projects/[projectId]/certificates" }
    - { from: "/projects/[projectId]/tests", to: "/app/projects/[projectId]/tests" }
    - { from: "/projects/[projectId]/samples", to: "/app/projects/[projectId]/samples" }
    - { from: "/projects/[projectId]/methods", to: "/app/projects/[projectId]/methods" }
    - { from: "/projects/[projectId]/lots/[lotId]/closeout", to: "/app/projects/[projectId]/lots/[lotId]/closeout" }
    - { from: "/projects/[projectId]/hse/swms", to: "/app/projects/[projectId]/hse/swms" }
    - { from: "/projects/[projectId]/hse/permits", to: "/app/projects/[projectId]/hse/permits" }
    - { from: "/projects/[projectId]/hse/toolbox-talks", to: "/app/projects/[projectId]/hse/toolbox-talks" }
    - { from: "/projects/[projectId]/hse/safety-walks", to: "/app/projects/[projectId]/hse/safety-walks" }
    - { from: "/projects/[projectId]/hse/inductions", to: "/app/projects/[projectId]/hse/inductions" }
    - { from: "/projects/[projectId]/hse/incidents", to: "/app/projects/[projectId]/hse/incidents" }
    - { from: "/projects/[projectId]/hse/capa", to: "/app/projects/[projectId]/hse/capa" }
    - { from: "/projects/[projectId]/daily-diaries", to: "/app/projects/[projectId]/field/daily-diaries" }
    - { from: "/projects/[projectId]/site-instructions", to: "/app/projects/[projectId]/field/site-instructions" }
    - { from: "/projects/[projectId]/timesheets", to: "/app/projects/[projectId]/field/timesheets" }
    - { from: "/projects/[projectId]/roster", to: "/app/projects/[projectId]/field/roster" }
    - { from: "/projects/[projectId]/plant", to: "/app/projects/[projectId]/field/plant" }
    - { from: "/projects/[projectId]/approvals/designer", to: "/app/projects/[projectId]/approvals/designer" }
    - { from: "/projects/[projectId]/approvals/inbox", to: "/app/projects/[projectId]/approvals/inbox" }
    - { from: "/projects/[projectId]/inbox", to: "/app/projects/[projectId]/inbox" }
    - { from: "/projects/[projectId]/map", to: "/app/projects/[projectId]/map" }
    - { from: "/projects/[projectId]/reports", to: "/app/projects/[projectId]/reports" }
    - { from: "/portal/[projectId]/dashboard", to: "/portal/projects/[projectId]/dashboard" }
    - { from: "/portal/[projectId]/details", to: "/portal/projects/[projectId]/details" }
    - { from: "/portal/[projectId]/documents", to: "/portal/projects/[projectId]/documents" }
    - { from: "/portal/[projectId]/itp-templates", to: "/portal/projects/[projectId]/itp-templates" }
    - { from: "/portal/[projectId]/lots", to: "/portal/projects/[projectId]/lots" }
    - { from: "/portal/[projectId]/ncrs", to: "/portal/projects/[projectId]/ncrs" }
    - { from: "/portal/[projectId]/pending-approvals", to: "/portal/projects/[projectId]/pending-approvals" }
    - { from: "/portal/[projectId]/management-plans", to: "/portal/projects/[projectId]/management-plans" }
    - { from: "/portal/[projectId]/wbs", to: "/portal/projects/[projectId]/wbs" }
migrations:
  mode: "greenfield"
  creation_order:
    - "organizations"
    - "roles"
    - "permissions"
    - "role_permissions"
    - "organization_users"
    - "projects"
    - "project_members"
    - "assets"
    - "asset_edges"
    - "processing_runs"
    - "documents"
    - "asset_embeddings"
    - "events"
    - "audit_events"
    - "retention_policies"
    - "legal_holds"
    - "webhooks_outbound"
    - "correspondence_threads"
    - "project_feature_flags"
    - "views: asset_heads, asset_history, work_lot_register, hold_witness_register, identified_records_register, itp_register"
  functions:
    - name: "set_assets_org_from_project"
      signature: "() RETURNS trigger"
      language: "plpgsql"
      definition: |
        BEGIN
          IF NEW.project_id IS NOT NULL THEN
            SELECT organization_id INTO NEW.organization_id FROM projects WHERE id = NEW.project_id;
          END IF;
          RETURN NEW;
        END;
    - name: "ensure_belongs_to_project_edge"
      signature: "() RETURNS trigger"
      language: "plpgsql"
      definition: |
        DECLARE project_asset uuid;
        DECLARE existing_edge uuid;
      BEGIN
        IF NEW.project_id IS NULL THEN
          RETURN NEW;
        END IF;
        SELECT id INTO project_asset FROM assets
          WHERE type='project' AND id = NEW.project_id AND is_current AND NOT is_deleted;
        IF project_asset IS NULL THEN
          RETURN NEW;
        END IF;
        SELECT id INTO existing_edge FROM asset_edges
          WHERE from_asset_id = NEW.id AND edge_type='BELONGS_TO_PROJECT';
        IF existing_edge IS NULL THEN
          INSERT INTO asset_edges (id, from_asset_id, to_asset_id, edge_type, properties, idempotency_key)
            VALUES (gen_random_uuid(), NEW.id, project_asset, 'BELONGS_TO_PROJECT', '{}'::jsonb, concat('BELONGS_TO_PROJECT:', NEW.id::text));
        ELSE
          UPDATE asset_edges SET to_asset_id = project_asset WHERE id = existing_edge;
        END IF;
        RETURN NEW;
      END;
    - name: "prevent_parent_cycle"
      signature: "() RETURNS trigger"
      language: "plpgsql"
      definition: |
        BEGIN
          IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
            IF NEW.edge_type = 'PARENT_OF' THEN
              IF NEW.from_asset_id = NEW.to_asset_id THEN
                RAISE EXCEPTION 'PARENT_OF cannot be reflexive';
              END IF;
              -- simple cycle guard: prevent reverse existing parent linking back
              IF EXISTS (
                SELECT 1 FROM asset_edges e
                  WHERE e.edge_type='PARENT_OF'
                    AND e.from_asset_id = NEW.to_asset_id
                    AND e.to_asset_id = NEW.from_asset_id
              ) THEN
                RAISE EXCEPTION 'Cycle detected in PARENT_OF';
              END IF;
            END IF;
          END IF;
          RETURN NEW;
        END;
    - name: "project_flag_enabled"
      signature: "(project_id uuid, flag text) RETURNS boolean"
      language: "sql"
      definition: "SELECT COALESCE((SELECT (flags ->> flag)::boolean FROM project_feature_flags WHERE project_id = $1), false)"
  triggers:
    - table: "assets"
      event: "BEFORE INSERT OR UPDATE"
      function: "set_assets_org_from_project"
      name: "trg_assets_set_org"
    - table: "assets"
      event: "AFTER INSERT OR UPDATE"
      function: "ensure_belongs_to_project_edge"
      name: "trg_assets_belongs_to_project_edge"
    - table: "asset_edges"
      event: "BEFORE INSERT OR UPDATE"
      function: "prevent_parent_cycle"
      name: "trg_asset_edges_acyclic_parent"
    - table: "projects"
      event: "AFTER INSERT"
      function: "create_project_asset_from_projects"
      name: "trg_projects_create_asset"
  views:
    - name: "work_lot_register"
      definition: |
        WITH lot_assets AS (
          SELECT a.*
          FROM assets a
          WHERE a.type='lot' AND a.is_current AND NOT a.is_deleted
        ),
        hp_wp AS (
          SELECT l.id AS lot_id,
                 jsonb_agg(DISTINCT jsonb_build_object(
                   'inspection_point_id', ip.id,
                   'code', ip.content->>'code',
                   'title', ip.content->>'title',
                   'point_type', ip.content->>'point_type',
                   'sla_due_at', ip.content->>'sla_due_at',
                   'notified_at', ip.content->>'notified_at',
                   'released_at', ip.content->>'released_at',
                   'approval_state', ip.approval_state
                 )) AS inspection_points
          FROM lot_assets l
          JOIN asset_edges e ON (e.edge_type IN ('BLOCKED_BY','REFERENCES') AND (e.from_asset_id = l.id OR e.to_asset_id = l.id))
          JOIN assets ip ON ip.id = (CASE WHEN e.from_asset_id = l.id THEN e.to_asset_id ELSE e.from_asset_id END)
          WHERE ip.type='inspection_point' AND ip.is_current AND NOT ip.is_deleted
          GROUP BY l.id
        ),
        test_results AS (
          SELECT (tr.content->>'lot_asset_id')::uuid AS lot_id,
                 jsonb_agg(tr.content) AS test_results
          FROM assets tr
          WHERE tr.type='test_result' AND tr.is_current AND NOT tr.is_deleted
            AND (tr.content->>'lot_asset_id') IS NOT NULL
          GROUP BY (tr.content->>'lot_asset_id')::uuid
        )
        SELECT l.project_id,
               l.organization_id,
               l.id AS lot_asset_id,
               l.asset_uid,
               l.version,
               l.name AS lot_name,
               (l.content->>'lot_number') AS lot_number,
               (l.content->>'status') AS lot_status,
               l.approval_state,
               (l.content->>'itp_document_asset_id') AS itp_document_asset_id,
               COALESCE(hp_wp.inspection_points, '[]'::jsonb) AS inspection_points,
               COALESCE(trs.test_results, '[]'::jsonb) AS test_results
        FROM lot_assets l
        LEFT JOIN hp_wp ON hp_wp.lot_id = l.id
        LEFT JOIN test_results trs ON trs.lot_id = l.id;
    - name: "hold_witness_register"
      definition: |
        SELECT ip.project_id,
               ip.organization_id,
               ip.id AS inspection_point_id,
               ip.asset_uid,
               ip.version,
               ip.name,
               ip.approval_state,
               ip.content->>'point_type' AS point_type,
               ip.content->>'code' AS code,
               ip.content->>'title' AS title,
               ip.content->>'itp_item_ref' AS itp_item_ref,
               ip.content->>'jurisdiction_rule_ref' AS jurisdiction_rule_ref,
               ip.content->>'notified_at' AS notified_at,
               ip.content->>'released_at' AS released_at,
               ip.content->>'sla_due_at' AS sla_due_at
        FROM assets ip
        WHERE ip.type='inspection_point' AND ip.is_current AND NOT ip.is_deleted;
    - name: "identified_records_register"
      definition: |
        SELECT a.organization_id,
               a.project_id,
               a.id AS asset_id,
               a.name,
               a.type,
               a.subtype,
               a.status,
               a.approval_state,
               a.content->'records_identified' AS records_identified
        FROM assets a
        WHERE a.type IN ('plan','itp_document','itp_template') AND a.is_current AND NOT a.is_deleted;
    - name: "itp_register"
      definition: |
        SELECT itp.organization_id,
               itp.project_id,
               itp.id AS itp_asset_id,
               itp.version,
               itp.approval_state,
               (SELECT jsonb_agg(jsonb_build_object('user_or_role', ap.to_asset_id, 'approved_at', ap.properties->>'approved_at'))
                  FROM asset_edges ap
                  WHERE ap.edge_type='APPROVED_BY' AND ap.from_asset_id=itp.id) AS approvals,
               itp.content->>'jurisdiction_coverage_status' AS jurisdiction_coverage_status,
               itp.content->>'required_points_present' AS required_points_present
        FROM assets itp
        WHERE itp.type IN ('itp_template','itp_document') AND itp.is_current AND NOT itp.is_deleted;
security:
  classification_defaults:
    mapping:
      email: "restricted"
      correspondence: "restricted"
      timesheet: "restricted"
      incident: "restricted"
      daily_diary: "confidential"
      site_instruction: "confidential"
      itp_document: "confidential"
      itp_template: "confidential"
      test_result: "confidential"
      plan: "internal"
      document: "internal"
    enforced_in: ["action_graph_repo", "action_*"]
    pii_redaction:
      strategy: "documents.metadata.pii_flags drives ACLs/redaction; redact at render and export layers"
  multi_tenancy:
    isolation:
      - "assets.organization_id present on every row"
      - "Derived BELONGS_TO_PROJECT edges maintained"
      - "RLS policies applied at DB layer per organization_id and project_id (declared in platform DB, not reproduced here)"
email_threading:
  derivation:
    algorithm: "Use Message-Id; if In-Reply-To or References present, fold chain into deterministic hash; normalize case/whitespace"
    required_fields: ["message_id", "in_reply_to"]
    uniqueness: "UNIQUE (project_id, thread_key) enforced in correspondence_threads"
time_handling:
  io_format: "ISO 8601 strings in agent outputs"
  persist_as: "timestamptz in DB"
  sla_fields:
    - "sla_due_at as absolute deadline"
    - "sla_hours retained where duration is needed"
  converters: "Shared utils in repo for parsing/serialization; generated columns convert strings to timestamptz"
frameworks:
  locked_initial_set:
    - { code: "ISO 9001", name: "Quality Management Systems" }
    - { code: "ISO 14001", name: "Environmental Management Systems" }
    - { code: "ISO 45001", name: "Occupational Health and Safety" }
    - { code: "ISO 27001", name: "Information Security" }
    - { code: "ISO 31000", name: "Risk Management" }
    - { code: "ISO 55001", name: "Asset Management" }
nodes:
  - id: "page_login"
    type: "page"
    name: "Login Page"
    description: "User authentication and login interface"
    path: "/auth/login"
    component: "PasswordSignIn"
    route_group: "auth"
  - id: "page_subscription_sync"
    type: "page"
    name: "Subscription Sync"
    description: "Stripe subscription synchronization after payment"
    path: "/auth/subscription/sync"
    component: "SubscriptionSync"
    route_group: "auth"
  - id: "page_account"
    type: "page"
    name: "Account Management"
    description: "User account settings and profile management"
    path: "/app/account"
    component: "AccountPage"
    route_group: "app"
  - id: "page_dashboard"
    type: "page"
    name: "User Dashboard"
    description: "User-specific dashboard and overview"
    path: "/app/dashboard"
    component: "DashboardPage"
    route_group: "app"
  - id: "page_subscription_required"
    type: "page"
    name: "Subscription Required"
    description: "Page shown when subscription is required"
    path: "/auth/subscription/required"
    component: "SubscriptionRequiredPage"
    route_group: "auth"
  - id: "page_landing"
    type: "page"
    name: "Landing Page"
    description: "Public marketing landing page"
    path: "/"
    component: "LandingPage"
    route_group: "marketing"
  - id: "page_about"
    type: "page"
    name: "About Page"
    description: "Company about and information page"
    path: "/about"
    component: "AboutPage"
    route_group: "marketing"
  - id: "page_pricing"
    type: "page"
    name: "Pricing Page"
    description: "Subscription plans and pricing"
    path: "/pricing"
    component: "PricingPage"
    route_group: "marketing"
  - id: "page_contact"
    type: "page"
    name: "Contact Page"
    description: "Contact information and form"
    path: "/contact"
    component: "ContactPage"
    route_group: "marketing"
  - id: "page_privacy"
    type: "page"
    name: "Privacy Policy"
    description: "Privacy policy and data handling"
    path: "/legal/privacy"
    component: "PrivacyPage"
    route_group: "marketing"
  - id: "page_security"
    type: "page"
    name: "Security Page"
    description: "Security practices and certifications"
    path: "/security"
    component: "SecurityPage"
    route_group: "marketing"
  - id: "page_terms"
    type: "page"
    name: "Terms of Service"
    description: "Terms and conditions"
    path: "/legal/terms"
    component: "TermsPage"
    route_group: "marketing"
  - id: "page_projects_dashboard"
    type: "page"
    name: "Projects Dashboard"
    description: "Main project listing and management dashboard"
    path: "/app/projects"
    component: "ProjectList"
    route_group: "app"
  - id: "page_project_overview"
    type: "page"
    name: "Project Overview"
    description: "Project details and summary page"
    path: "/app/projects/[projectId]/overview"
    component: "ProjectInfoDisplay"
    route_group: "app"
  - id: "page_project_documents"
    type: "page"
    name: "Project Documents"
    description: "Document management and upload interface"
    path: "/app/projects/[projectId]/documents"
    component: "DocumentList"
    route_group: "app"
  - id: "page_wbs"
    type: "page"
    name: "Work Breakdown Structure"
    description: "WBS hierarchy management interface"
    path: "/app/projects/[projectId]/wbs"
    component: "WbsView"
    route_group: "app"
  - id: "page_lbs"
    type: "page"
    name: "Location Breakdown Structure"
    description: "LBS hierarchy management interface"
    path: "/app/projects/[projectId]/lbs"
    component: "LotRegisterTable"
    route_group: "app"
  - id: "page_itp_templates"
    type: "page"
    name: "ITP Templates"
    description: "Inspection and Test Plan template management"
    path: "/app/projects/[projectId]/quality/itp-templates"
    component: "ItpTemplateEditorEnhanced"
    route_group: "app"
  - id: "page_itp_documents"
    type: "page"
    name: "ITP Documents"
    description: "Generated ITP documents from templates"
    path: "/app/projects/[projectId]/quality/itp"
    component: "ItpDocumentList"
    route_group: "app"
  - id: "page_project_details"
    type: "page"
    name: "Project Details"
    description: "Detailed project settings and configuration"
    path: "/app/projects/[projectId]/settings"
    component: "ProjectSettings"
    route_group: "app"
  - id: "page_quality_lots"
    type: "page"
    name: "Quality Lots Register"
    description: "Work lots with HP/WP/test results, pack-gated"
    path: "/app/projects/[projectId]/quality/lots"
    component: "WorkLotRegister"
    route_group: "app"
  - id: "page_quality_hold_witness"
    type: "page"
    name: "Hold & Witness Register"
    description: "Inspection points (HP/WP) tracking with SLA"
    path: "/app/projects/[projectId]/quality/hold-witness"
    component: "HoldWitnessRegister"
    route_group: "app"
  - id: "page_quality_itp_register"
    type: "page"
    name: "ITP Register"
    description: "ITP register with endorsement and coverage"
    path: "/app/projects/[projectId]/quality/itp-register"
    component: "ItpRegister"
    route_group: "app"
  - id: "page_quality_records"
    type: "page"
    name: "Records Handover Dashboard"
    description: "RMP/identified records delivery status"
    path: "/app/projects/[projectId]/quality/records"
    component: "RecordsHandoverDashboard"
    route_group: "app"
  - id: "page_primary_testing"
    type: "page"
    name: "Primary Testing (NSW)"
    description: "Manage primary testing contracts and labs"
    path: "/app/projects/[projectId]/quality/primary-testing"
    component: "PrimaryTestingView"
    route_group: "app"
  - id: "page_inspections"
    type: "page"
    name: "Inspection Register"
    description: "Register and manage Inspection Requests (IRs)"
    path: "/app/projects/[projectId]/inspections"
    component: "InspectionRegister"
    route_group: "app"
  - id: "page_inspection_detail"
    type: "page"
    name: "IR Detail"
    description: "Detailed IR view with signatures and scheduling"
    path: "/app/projects/[projectId]/inspections/[irId]"
    component: "InspectionRequestForm"
    route_group: "app"
  - id: "page_materials"
    type: "page"
    name: "Material Approvals Register"
    description: "Register of material approvals and traceability"
    path: "/app/projects/[projectId]/materials"
    component: "MaterialApprovalsRegister"
    route_group: "app"
  - id: "page_mix_designs"
    type: "page"
    name: "Mix Designs"
    description: "Mix designs library and approvals"
    path: "/app/projects/[projectId]/mix-designs"
    component: "MixDesignsList"
    route_group: "app"
  - id: "page_certificates"
    type: "page"
    name: "Certificates"
    description: "Calibration certificates, MSDS, and other certificates"
    path: "/app/projects/[projectId]/certificates"
    component: "CertificatesRegister"
    route_group: "app"
  - id: "page_tests"
    type: "page"
    name: "Test Register"
    description: "Test requests and results lifecycle"
    path: "/app/projects/[projectId]/tests"
    component: "TestRegister"
    route_group: "app"
  - id: "page_samples"
    type: "page"
    name: "Sample Register"
    description: "Sample register and chain of custody"
    path: "/app/projects/[projectId]/samples"
    component: "SampleRegister"
    route_group: "app"
  - id: "page_methods_library"
    type: "page"
    name: "Methods Library"
    description: "Test methods library with acceptance criteria"
    path: "/app/projects/[projectId]/methods"
    component: "MethodsLibrary"
    route_group: "app"
  - id: "page_lot_closeout"
    type: "page"
    name: "Lot Closeout Pack"
    description: "Generate and publish lot closeout packs"
    path: "/app/projects/[projectId]/lots/[lotId]/closeout"
    component: "LotCloseoutPack"
    route_group: "app"
  - id: "page_swms_register"
    type: "page"
    name: "SWMS Register"
    description: "SWMS register and expiries"
    path: "/app/projects/[projectId]/hse/swms"
    component: "SwmsRegister"
    route_group: "app"
  - id: "page_permits_register"
    type: "page"
    name: "Permits to Work"
    description: "Permit management"
    path: "/app/projects/[projectId]/hse/permits"
    component: "PermitsRegister"
    route_group: "app"
  - id: "page_toolbox_talks"
    type: "page"
    name: "Toolbox Talks"
    description: "Toolbox talks log"
    path: "/app/projects/[projectId]/hse/toolbox-talks"
    component: "ToolboxTalks"
    route_group: "app"
  - id: "page_safety_walks"
    type: "page"
    name: "Safety Walks"
    description: "Safety walks and observations"
    path: "/app/projects/[projectId]/hse/safety-walks"
    component: "SafetyWalks"
    route_group: "app"
  - id: "page_inductions"
    type: "page"
    name: "Inductions"
    description: "Project inductions management"
    path: "/app/projects/[projectId]/hse/inductions"
    component: "InductionsRegister"
    route_group: "app"
  - id: "page_incidents"
    type: "page"
    name: "Incident Register"
    description: "Incident reporting and investigation"
    path: "/app/projects/[projectId]/hse/incidents"
    component: "IncidentRegister"
    route_group: "app"
  - id: "page_capa"
    type: "page"
    name: "CAPA Tracking"
    description: "Corrective and Preventive Actions tracking"
    path: "/app/projects/[projectId]/hse/capa"
    component: "CapaTracking"
    route_group: "app"
  - id: "page_daily_diaries"
    type: "page"
    name: "Daily Diaries"
    description: "Site daily diaries"
    path: "/app/projects/[projectId]/field/daily-diaries"
    component: "DailyDiaryPage"
    route_group: "app"
  - id: "page_site_instructions"
    type: "page"
    name: "Site Instructions"
    description: "Site instructions register"
    path: "/app/projects/[projectId]/field/site-instructions"
    component: "SiteInstructionsPage"
    route_group: "app"
  - id: "page_timesheets"
    type: "page"
    name: "Timesheets"
    description: "Timesheets management"
    path: "/app/projects/[projectId]/field/timesheets"
    component: "TimesheetsPage"
    route_group: "app"
  - id: "page_roster"
    type: "page"
    name: "Roster"
    description: "Rostering"
    path: "/app/projects/[projectId]/field/roster"
    component: "RosterPage"
    route_group: "app"
  - id: "page_plant"
    type: "page"
    name: "Plant"
    description: "Plant and equipment logs"
    path: "/app/projects/[projectId]/field/plant"
    component: "PlantPage"
    route_group: "app"
  - id: "page_approvals_designer"
    type: "page"
    name: "Approvals Designer"
    description: "Design approval workflows and rules"
    path: "/app/projects/[projectId]/approvals/designer"
    component: "ApprovalsDesigner"
    route_group: "app"
  - id: "page_approvals_inbox"
    type: "page"
    name: "Approvals Inbox"
    description: "My approvals inbox"
    path: "/app/projects/[projectId]/approvals/inbox"
    component: "ApprovalsInbox"
    route_group: "app"
  - id: "page_project_inbox"
    type: "page"
    name: "Project Inbox"
    description: "Email and correspondence threading"
    path: "/app/projects/[projectId]/inbox"
    component: "ProjectInbox"
    route_group: "app"
  - id: "page_map"
    type: "page"
    name: "Map View"
    description: "GIS map with pins for IRs/NCRs/tests"
    path: "/app/projects/[projectId]/map"
    component: "MapView"
    route_group: "app"
  - id: "page_reports"
    type: "page"
    name: "Reports Dashboard"
    description: "Analytics dashboards and exports"
    path: "/app/projects/[projectId]/reports"
    component: "ReportsDashboard"
    route_group: "app"
  - id: "page_client_projects"
    type: "page"
    name: "Client Projects"
    description: "Client view of their projects"
    path: "/portal/projects"
    component: "ClientProjectList"
    route_group: "client"
  - id: "page_client_dashboard"
    type: "page"
    name: "Client Project Dashboard"
    description: "Client-specific project dashboard"
    path: "/portal/projects/[projectId]/dashboard"
    component: "ClientDashboard"
    route_group: "client"
  - id: "page_client_details"
    type: "page"
    name: "Client Project Details"
    description: "Client view of project details"
    path: "/portal/projects/[projectId]/details"
    component: "ClientProjectDetails"
    route_group: "client"
  - id: "page_client_documents"
    type: "page"
    name: "Client Documents"
    description: "Client access to project documents"
    path: "/portal/projects/[projectId]/documents"
    component: "ClientDocumentList"
    route_group: "client"
  - id: "page_client_itp_templates"
    type: "page"
    name: "Client ITP Templates"
    description: "Client approval interface for ITP templates"
    path: "/portal/projects/[projectId]/itp-templates"
    component: "ClientItpTemplateList"
    route_group: "client"
  - id: "page_client_lots"
    type: "page"
    name: "Client Lots"
    description: "Client view of project lots"
    path: "/portal/projects/[projectId]/lots"
    component: "ClientLotList"
    route_group: "client"
  - id: "page_client_ncrs"
    type: "page"
    name: "Client NCRs"
    description: "Client NCR approval and tracking"
    path: "/portal/projects/[projectId]/ncrs"
    component: "ClientNcrList"
    route_group: "client"
  - id: "page_client_pending_approvals"
    type: "page"
    name: "Client Pending Approvals"
    description: "Client pending approvals dashboard"
    path: "/portal/projects/[projectId]/pending-approvals"
    component: "ClientPendingApprovals"
    route_group: "client"
  - id: "page_client_management_plans"
    type: "page"
    name: "Client Management Plans"
    description: "Client view of management plans"
    path: "/portal/projects/[projectId]/management-plans"
    component: "ClientManagementPlans"
    route_group: "client"
  - id: "page_client_wbs"
    type: "page"
    name: "Client WBS"
    description: "Client view of work breakdown structure"
    path: "/portal/projects/[projectId]/wbs"
    component: "ClientWbsView"
    route_group: "client"
  - id: "page_qse_main"
    type: "page"
    name: "QSE Main Dashboard"
    description: "Corporate QSE system main dashboard"
    path: "/app/qse"
    component: "QsePage"
    route_group: "app"
  - id: "page_qse_corp_tier_1"
    type: "page"
    name: "Corporate Tier 1"
    description: "IMS Manual and IMS Scope documents"
    path: "/app/qse/corporate-tier-1"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_policy_roles"
    type: "page"
    name: "Corporate Policy & Roles"
    description: "QSE Policy and roles matrix"
    path: "/app/qse/corp-policy-roles"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_planning"
    type: "page"
    name: "Corporate Planning"
    description: "Planning procedures and documents"
    path: "/app/qse/corp-planning"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_operation"
    type: "page"
    name: "Corporate Operation"
    description: "Operational procedures and controls"
    path: "/app/qse/corp-operation"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_op_procedures_templates"
    type: "page"
    name: "Operational Procedures & Templates"
    description: "Detailed operational procedures and templates"
    path: "/app/qse/corp-op-procedures-templates"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_support"
    type: "page"
    name: "Corporate Support"
    description: "Support functions and infrastructure"
    path: "/app/qse/corp-support"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_risk_management"
    type: "page"
    name: "Corporate Risk Management"
    description: "Risk management procedures and registers"
    path: "/app/qse/corp-risk-management"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_review"
    type: "page"
    name: "Corporate Review"
    description: "Management review procedures"
    path: "/app/qse/corp-review"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_performance"
    type: "page"
    name: "Corporate Performance"
    description: "Performance evaluation procedures"
    path: "/app/qse/corp-performance"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_monitoring"
    type: "page"
    name: "Corporate Monitoring"
    description: "Monitoring, measurement, analysis procedures"
    path: "/app/qse/corp-monitoring"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_improvement"
    type: "page"
    name: "Corporate Improvement"
    description: "Continual improvement procedures"
    path: "/app/qse/corp-improvement"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_continual_improvement"
    type: "page"
    name: "Corporate Continual Improvement"
    description: "Continual improvement register and procedures"
    path: "/app/qse/corp-continual-improvement"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_objectives"
    type: "page"
    name: "Corporate Objectives"
    description: "QSE objectives and targets"
    path: "/app/qse/corp-objectives"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_documentation"
    type: "page"
    name: "Corporate Documentation"
    description: "Documentation control procedures"
    path: "/app/qse/corp-documentation"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_communication"
    type: "page"
    name: "Corporate Communication"
    description: "Communication procedures and matrix"
    path: "/app/qse/corp-communication"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_consultation"
    type: "page"
    name: "Corporate Consultation"
    description: "Worker consultation procedures"
    path: "/app/qse/corp-consultation"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_competence"
    type: "page"
    name: "Corporate Competence"
    description: "Competence management procedures"
    path: "/app/qse/corp-competence"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_leadership"
    type: "page"
    name: "Corporate Leadership"
    description: "Leadership and commitment procedures"
    path: "/app/qse/corp-leadership"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_legal"
    type: "page"
    name: "Corporate Legal"
    description: "Legal compliance procedures"
    path: "/app/qse/corp-legal"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_ncr"
    type: "page"
    name: "Corporate NCR"
    description: "Non-conformance report procedures"
    path: "/app/qse/corp-ncr"
    component: "QseDocViewer"
    route_group: "app"
  - id: "page_qse_corp_context"
    type: "page"
    name: "Corporate Context"
    description: "Organizational context and interested parties"
    path: "/app/qse/corp-context"
    component: "QseDocViewer"
    route_group: "app"
  - id: "component_PasswordSignIn"
    type: "component"
    name: "PasswordSignIn"
    description: "Password-based sign-in form component"
    file: "src/components/features/auth/PasswordSignIn.tsx"
  - id: "component_EmailSignIn"
    type: "component"
    name: "EmailSignIn"
    description: "Email-based sign-in form component"
    file: "src/components/features/auth/EmailSignIn.tsx"
  - id: "component_OauthSignIn"
    type: "component"
    name: "OauthSignIn"
    description: "OAuth provider sign-in buttons"
    file: "src/components/features/auth/OauthSignIn.tsx"
  - id: "component_SignUp"
    type: "component"
    name: "SignUp"
    description: "User registration form component"
    file: "src/components/features/auth/SignUp.tsx"
  - id: "component_ForgotPassword"
    type: "component"
    name: "ForgotPassword"
    description: "Password reset request form"
    file: "src/components/features/auth/ForgotPassword.tsx"
  - id: "component_UpdatePassword"
    type: "component"
    name: "UpdatePassword"
    description: "Password update form"
    file: "src/components/features/auth/UpdatePassword.tsx"
  - id: "component_Separator"
    type: "component"
    name: "Separator"
    description: "Visual separator component for auth forms"
    file: "src/components/features/auth/Separator.tsx"
  - id: "component_ProjectList"
    type: "component"
    name: "ProjectList"
    description: "Project listing with cards and actions"
    file: "src/components/features/project/ProjectList.tsx"
  - id: "component_ProjectCard"
    type: "component"
    name: "ProjectCard"
    description: "Individual project card with metadata"
    file: "src/components/features/project/ProjectCard.tsx"
  - id: "component_ProjectInfoDisplay"
    type: "component"
    name: "ProjectInfoDisplay"
    description: "Project information display component"
    file: "src/components/features/project/ProjectInfoDisplay.tsx"
  - id: "component_ProjectSettings"
    type: "component"
    name: "ProjectSettings"
    description: "Project settings and configuration component"
    file: "src/components/features/project/ProjectSettings.tsx"
  - id: "component_NewProjectUploadPage"
    type: "component"
    name: "NewProjectUploadPage"
    description: "Project creation with document upload and AI processing"
    file: "src/components/features/project/NewProjectUploadPage.tsx"
  - id: "component_DocumentList"
    type: "component"
    name: "DocumentList"
    description: "Document listing and management interface"
    file: "src/components/features/document/DocumentList.tsx"
  - id: "component_ClientDocumentList"
    type: "component"
    name: "ClientDocumentList"
    description: "Client portal document listing"
    file: "src/components/features/client-portal/ClientDocumentList.tsx"
  - id: "component_WbsView"
    type: "component"
    name: "WbsView"
    description: "WBS hierarchical tree view and editor"
    file: "src/components/features/wbs/WbsView.tsx"
  - id: "component_ClientWbsView"
    type: "component"
    name: "ClientWbsView"
    description: "Client portal WBS view"
    file: "src/components/features/client-portal/ClientWbsView.tsx"
  - id: "component_ClientDashboard"
    type: "component"
    name: "ClientDashboard"
    description: "Client-specific project dashboard"
    file: "src/components/features/client-portal/ClientDashboard.tsx"
  - id: "component_ClientManagementPlans"
    type: "component"
    name: "ClientManagementPlans"
    description: "Client view of management plans"
    file: "src/components/features/client-portal/ClientManagementPlans.tsx"
  - id: "component_ClientPendingApprovals"
    type: "component"
    name: "ClientPendingApprovals"
    description: "Client pending approvals dashboard"
    file: "src/components/features/client-portal/ClientPendingApprovals.tsx"
  - id: "component_ClientProjectDetails"
    type: "component"
    name: "ClientProjectDetails"
    description: "Client view of project details"
    file: "src/components/features/client-portal/ClientProjectDetails.tsx"
  - id: "component_ClientProjectList"
    type: "component"
    name: "ClientProjectList"
    description: "Client view of their projects"
    file: "src/components/features/client-portal/ClientProjectList.tsx"
  - id: "component_DailyDiaryPage"
    type: "component"
    name: "DailyDiaryPage"
    description: "Site daily diaries"
    file: "src/components/features/field/DailyDiaryPage.tsx"
  - id: "component_ItpDocumentList"
    type: "component"
    name: "ItpDocumentList"
    description: "Generated ITP documents from templates"
    file: "src/components/features/itp/ItpDocumentList.tsx"
  - id: "component_PlantPage"
    type: "component"
    name: "PlantPage"
    description: "Plant and equipment logs"
    file: "src/components/features/field/PlantPage.tsx"
  - id: "component_RosterPage"
    type: "component"
    name: "RosterPage"
    description: "Rostering"
    file: "src/components/features/field/RosterPage.tsx"
  - id: "component_SiteInstructionsPage"
    type: "component"
    name: "SiteInstructionsPage"
    description: "Site instructions register"
    file: "src/components/features/field/SiteInstructionsPage.tsx"
  - id: "component_TimesheetsPage"
    type: "component"
    name: "TimesheetsPage"
    description: "Timesheets management"
    file: "src/components/features/field/TimesheetsPage.tsx"
  - id: "component_LotRegisterTable"
    type: "component"
    name: "LotRegisterTable"
    description: "Lot register with LBS hierarchy and status management"
    file: "src/components/features/lot/LotRegisterTable.tsx"
  - id: "component_ClientLotList"
    type: "component"
    name: "ClientLotList"
    description: "Client portal lot listing"
    file: "src/components/features/client-portal/ClientLotList.tsx"
  - id: "component_ActivateLotModal"
    type: "component"
    name: "ActivateLotModal"
    description: "Modal for activating potential lots"
    file: "src/components/features/lot/ActivateLotModal.tsx"
  - id: "component_LotHierarchyView"
    type: "component"
    name: "LotHierarchyView"
    description: "Location-based hierarchy visualization"
    file: "src/components/features/lot/LotHierarchyView.tsx"
  - id: "component_LotManagementView"
    type: "component"
    name: "LotManagementView"
    description: "Main lot management orchestrating component"
    file: "src/components/features/lot/LotManagementView.tsx"
  - id: "component_ItpTemplateEditorEnhanced"
    type: "component"
    name: "ItpTemplateEditorEnhanced"
    description: "Enhanced ITP template editor with revision management"
    file: "src/components/features/itp/ItpTemplateEditorEnhanced.tsx"
  - id: "component_ClientItpTemplateList"
    type: "component"
    name: "ClientItpTemplateList"
    description: "Client portal ITP template listing"
    file: "src/components/features/client-portal/ClientItpTemplateList.tsx"
  - id: "component_ClientItpRevisionTable"
    type: "component"
    name: "ClientItpRevisionTable"
    description: "Client portal ITP revision table"
    file: "src/components/features/client-portal/ClientItpRevisionTable.tsx"
  - id: "component_ClientRevisionComparison"
    type: "component"
    name: "ClientRevisionComparison"
    description: "Side-by-side revision comparison"
    file: "src/components/features/client-portal/ClientRevisionComparison.tsx"
  - id: "component_RevisionSelector"
    type: "component"
    name: "RevisionSelector"
    description: "ITP template revision selector dropdown"
    file: "src/components/features/itp/RevisionSelector.tsx"
  - id: "component_RevisionComparison"
    type: "component"
    name: "RevisionComparison"
    description: "Side-by-side diff view for revisions"
    file: "src/components/features/itp/RevisionComparison.tsx"
  - id: "component_NcrList"
    type: "component"
    name: "NcrList"
    description: "Non-conformance report listing and management"
    file: "src/components/features/ncr/NcrList.tsx"
  - id: "component_ClientNcrList"
    type: "component"
    name: "ClientNcrList"
    description: "Client portal NCR listing"
    file: "src/components/features/client-portal/ClientNcrList.tsx"
  - id: "component_ClientNcrDecisionForm"
    type: "component"
    name: "ClientNcrDecisionForm"
    description: "Client NCR approval/rejection form"
    file: "src/components/features/client-portal/ClientNcrDecisionForm.tsx"
  - id: "component_AccountPage"
    type: "component"
    name: "AccountPage"
    description: "User account management page"
    file: "src/components/features/account/AccountPage.tsx"
  - id: "component_NameForm"
    type: "component"
    name: "NameForm"
    description: "User name update form"
    file: "src/components/features/account/NameForm.tsx"
  - id: "component_EmailForm"
    type: "component"
    name: "EmailForm"
    description: "User email update form"
    file: "src/components/features/account/EmailForm.tsx"
  - id: "component_PricingTiers"
    type: "component"
    name: "PricingTiers"
    description: "Subscription pricing tiers display"
    file: "src/components/features/billing/PricingTiers.tsx"
  - id: "component_SubscriptionManagementView"
    type: "component"
    name: "SubscriptionManagementView"
    description: "Subscription management interface"
    file: "src/components/features/billing/SubscriptionManagementView.tsx"
  - id: "component_SubscriptionStatusAlert"
    type: "component"
    name: "SubscriptionStatusAlert"
    description: "Subscription status notification"
    file: "src/components/features/billing/SubscriptionStatusAlert.tsx"
  - id: "component_QsePage"
    type: "component"
    name: "QsePage"
    description: "QSE system main dashboard"
    file: "src/components/features/qse/QsePage.tsx"
  - id: "component_QseDocEditor"
    type: "component"
    name: "QseDocEditor"
    description: "QSE document editor component"
    file: "src/components/features/qse/QseDocEditor.tsx"
  - id: "component_QseDocumentSection"
    type: "component"
    name: "QseDocumentSection"
    description: "QSE document section component"
    file: "src/components/features/qse/QseDocumentSection.tsx"
  - id: "component_QseDocViewer"
    type: "component"
    name: "QseDocViewer"
    description: "QSE document viewer component"
    file: "src/components/features/qse/QseDocViewer.tsx"
  - id: "component_QseExportButton"
    type: "component"
    name: "QseExportButton"
    description: "QSE document export button"
    file: "src/components/features/qse/QseExportButton.tsx"
  - id: "component_SiteHeader"
    type: "component"
    name: "SiteHeader"
    description: "Main site header with navigation"
    file: "src/components/layout/SiteHeader.tsx"
  - id: "component_PublicFooter"
    type: "component"
    name: "PublicFooter"
    description: "Public site footer"
    file: "src/components/layout/PublicFooter.tsx"
  - id: "component_Sidebar"
    type: "component"
    name: "Sidebar"
    description: "Project navigation sidebar"
    file: "src/components/layout/Sidebar.tsx"
  - id: "component_AppLayoutClient"
    type: "component"
    name: "AppLayoutClient"
    description: "Client-side app layout wrapper"
    file: "src/app/(app)/app-layout-client.tsx"
  - id: "component_ClientPortalLayout"
    type: "component"
    name: "ClientPortalLayout"
    description: "Client portal layout wrapper"
    file: "src/app/(client)/client-portal-layout-client.tsx"
  - id: "component_Button"
    type: "component"
    name: "Button"
    description: "Reusable button component"
    file: "src/components/ui/button.tsx"
  - id: "component_Input"
    type: "component"
    name: "Input"
    description: "Form input component"
    file: "src/components/ui/input.tsx"
  - id: "component_Card"
    type: "component"
    name: "Card"
    description: "Content card container"
    file: "src/components/ui/card.tsx"
  - id: "component_Dialog"
    type: "component"
    name: "Dialog"
    description: "Modal dialog component"
    file: "src/components/ui/dialog.tsx"
  - id: "component_Table"
    type: "component"
    name: "Table"
    description: "Data table component"
    file: "src/components/ui/table.tsx"
  - id: "component_Form"
    type: "component"
    name: "Form"
    description: "Form wrapper component"
    file: "src/components/ui/form.tsx"
  - id: "component_Select"
    type: "component"
    name: "Select"
    description: "Dropdown select component"
    file: "src/components/ui/select.tsx"
  - id: "component_ThemeProvider"
    type: "component"
    name: "ThemeProvider"
    description: "Theme context provider"
    file: "src/components/theme-provider.tsx"
  - id: "component_ModeToggle"
    type: "component"
    name: "ModeToggle"
    description: "Dark/light mode toggle"
    file: "src/components/mode-toggle.tsx"
  - id: "component_InspectionRegister"
    type: "component"
    name: "InspectionRegister"
    description: "Inspection Requests register grid with filters and SLA indicators"
    file: "src/components/features/qa/InspectionRegister.tsx"
  - id: "component_InspectionRequestForm"
    type: "component"
    name: "InspectionRequestForm"
    description: "IR create/edit form with scheduling and checkpoint link"
    file: "src/components/features/qa/InspectionRequestForm.tsx"
  - id: "component_InspectionSignaturePanel"
    type: "component"
    name: "InspectionSignaturePanel"
    description: "Signatures capture for IRs including roles"
    file: "src/components/features/qa/InspectionSignaturePanel.tsx"
  - id: "component_MaterialApprovalsRegister"
    type: "component"
    name: "MaterialApprovalsRegister"
    description: "Material approvals and linked traceability tickets"
    file: "src/components/features/materials/MaterialApprovalsRegister.tsx"
  - id: "component_MixDesignsList"
    type: "component"
    name: "MixDesignsList"
    description: "Mix designs management and approvals"
    file: "src/components/features/materials/MixDesignsList.tsx"
  - id: "component_CertificatesRegister"
    type: "component"
    name: "CertificatesRegister"
    description: "Certificates register including MSDS and calibration"
    file: "src/components/features/materials/CertificatesRegister.tsx"
  - id: "component_TestRegister"
    type: "component"
    name: "TestRegister"
    description: "Test Requests lifecycle view"
    file: "src/components/features/tests/TestRegister.tsx"
  - id: "component_SampleRegister"
    type: "component"
    name: "SampleRegister"
    description: "Sample register with chain of custody"
    file: "src/components/features/tests/SampleRegister.tsx"
  - id: "component_MethodsLibrary"
    type: "component"
    name: "MethodsLibrary"
    description: "Methods and acceptance criteria library"
    file: "src/components/features/tests/MethodsLibrary.tsx"
  - id: "component_LotCloseoutPack"
    type: "component"
    name: "LotCloseoutPack"
    description: "Build and publish lot closeout packs"
    file: "src/components/features/lot/LotCloseoutPack.tsx"
  - id: "component_ConformanceStatementBuilder"
    type: "component"
    name: "ConformanceStatementBuilder"
    description: "Generate conformance statements"
    file: "src/components/features/lot/ConformanceStatementBuilder.tsx"
  - id: "component_LotQrCodeBadge"
    type: "component"
    name: "LotQrCodeBadge"
    description: "QR code for lot evidence deep-link"
    file: "src/components/features/lot/LotQrCodeBadge.tsx"
  - id: "component_SwmsRegister"
    type: "component"
    name: "SwmsRegister"
    description: "SWMS register and expiries"
    file: "src/components/features/hse/SwmsRegister.tsx"
  - id: "component_PermitsRegister"
    type: "component"
    name: "PermitsRegister"
    description: "Permit management"
    file: "src/components/features/hse/PermitsRegister.tsx"
  - id: "component_ToolboxTalks"
    type: "component"
    name: "ToolboxTalks"
    description: "Toolbox talks management"
    file: "src/components/features/hse/ToolboxTalks.tsx"
  - id: "component_SafetyWalks"
    type: "component"
    name: "SafetyWalks"
    description: "Safety walks logging"
    file: "src/components/features/hse/SafetyWalks.tsx"
  - id: "component_InductionsRegister"
    type: "component"
    name: "InductionsRegister"
    description: "Inductions management"
    file: "src/components/features/hse/InductionsRegister.tsx"
  - id: "component_IncidentRegister"
    type: "component"
    name: "IncidentRegister"
    description: "Incident reporting and root cause analysis"
    file: "src/components/features/hse/IncidentRegister.tsx"
  - id: "component_CapaTracking"
    type: "component"
    name: "CapaTracking"
    description: "CAPA workflow tracking"
    file: "src/components/features/hse/CapaTracking.tsx"
  - id: "component_ApprovalsDesigner"
    type: "component"
    name: "ApprovalsDesigner"
    description: "Workflow designer for approvals"
    file: "src/components/features/approvals/ApprovalsDesigner.tsx"
  - id: "component_ApprovalsInbox"
    type: "component"
    name: "ApprovalsInbox"
    description: "Inbox for approvals"
    file: "src/components/features/approvals/ApprovalsInbox.tsx"
  - id: "component_ProjectInbox"
    type: "component"
    name: "ProjectInbox"
    description: "Email and correspondence"
    file: "src/components/features/email/ProjectInbox.tsx"
  - id: "component_MapView"
    type: "component"
    name: "MapView"
    description: "GIS map view"
    file: "src/components/features/map/MapView.tsx"
  - id: "component_ReportsDashboard"
    type: "component"
    name: "ReportsDashboard"
    description: "Analytics dashboards"
    file: "src/components/features/reports/ReportsDashboard.tsx"
  - id: "component_WorkLotRegister"
    type: "component"
    name: "WorkLotRegister"
    description: "Pack-aware work lot register (HP/WP/test results) with gating indicators"
    file: "src/components/features/quality/WorkLotRegister.tsx"
    belongs_to_pack: true
    requires_flags: ["quality_module"]
  - id: "component_HoldWitnessRegister"
    type: "component"
    name: "HoldWitnessRegister"
    description: "Inspection points tracking, release workflow and SLA"
    file: "src/components/features/quality/HoldWitnessRegister.tsx"
    belongs_to_pack: true
    requires_flags: ["quality_module"]
  - id: "component_ItpRegister"
    type: "component"
    name: "ItpRegister"
    description: "ITP register with endorsement and coverage checks"
    file: "src/components/features/quality/ItpRegister.tsx"
    belongs_to_pack: true
    requires_flags: ["quality_module"]
  - id: "component_RecordsHandoverDashboard"
    type: "component"
    name: "RecordsHandoverDashboard"
    description: "Identified records/RMP delivery status"
    file: "src/components/features/quality/RecordsHandoverDashboard.tsx"
    belongs_to_pack: true
    requires_flags: ["quality_module"]
  - id: "component_PrimaryTestingView"
    type: "component"
    name: "PrimaryTestingView"
    description: "NSW Primary testing: contracts, labs, scheduling"
    file: "src/components/features/quality/nsw/PrimaryTestingView.tsx"
    belongs_to_pack: true
    requires_flags: ["enable_primary_testing"]
  - id: "api_quality_primary_testing"
    type: "api"
    name: "Quality Primary Testing API"
    description: "NSW Primary testing: contracts, labs, scheduling (asset-centric)"
    path: "/api/v1/projects/[projectId]/quality/primary-testing"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/projects/[projectId]/quality/primary-testing/route.ts"
  - id: "api_auth_callback"
    type: "api"
    name: "OAuth Callback API"
    description: "Handles OAuth provider callbacks and session creation"
    path: "/api/v1/auth/providers/[provider]/callback"
    methods: ["GET", "POST"]
    file: "src/app/api/v1/auth/providers/[provider]/callback/route.ts"
  - id: "api_projects"
    type: "api"
    name: "Projects API"
    description: "Project CRUD operations"
    path: "/api/v1/projects"
    methods: ["GET", "POST"]
    file: "src/app/api/v1/projects/route.ts"
  - id: "api_projects_generate_upload_urls"
    type: "api"
    name: "Generate Upload URLs API"
    description: "Generates Azure SAS URLs for document uploads"
    path: "/api/v1/projects/[projectId]/uploads/azure-sas"
    methods: ["POST"]
    file: "src/app/api/v1/projects/[projectId]/uploads/azure-sas/route.ts"
  - id: "api_projects_notify_uploads_complete"
    type: "api"
    name: "Notify Uploads Complete API"
    description: "Triggers AI processing after document uploads complete"
    path: "/api/v1/projects/[projectId]/uploads/complete"
    methods: ["POST"]
    file: "src/app/api/v1/projects/[projectId]/uploads/complete/route.ts"
  - id: "api_langgraph_stream"
    type: "api"
    name: "LangGraph Stream API"
    description: "Real-time AI processing status streaming"
    path: "/api/v1/projects/[projectId]/ai/streams"
    methods: ["GET"]
    file: "src/app/api/v1/projects/[projectId]/ai/streams/route.ts"
  - id: "api_langgraph_raw_stream"
    type: "api"
    name: "LangGraph Raw Stream API"
    description: "Raw LangGraph event streaming without processing"
    path: "/api/v1/projects/[projectId]/ai/streams/raw"
    methods: ["GET"]
    file: "src/app/api/v1/projects/[projectId]/ai/streams/raw/route.ts"
  - id: "api_processing_status"
    type: "api"
    name: "Processing Status API"
    description: "Get current AI processing status for project"
    path: "/api/v1/projects/[projectId]/ai/status"
    methods: ["GET"]
    file: "src/app/api/v1/projects/[projectId]/ai/status/route.ts"
  - id: "api_plans"
    type: "api"
    name: "Project Plans API"
    description: "Project plans and WBS/LBS assets"
    path: "/api/v1/projects/[projectId]/plans"
    methods: ["GET", "POST"]
    file: "src/app/api/v1/projects/[projectId]/plans/route.ts"
  - id: "api_assets"
    type: "api"
    name: "Assets API"
    description: "Generic assets read/write with filters"
    path: "/api/v1/assets"
    methods: ["GET", "POST", "PUT"]
    file: "src/app/api/v1/assets/route.ts"
  - id: "api_documents"
    type: "api"
    name: "Documents API"
    description: "Document upload and management"
    path: "/api/v1/documents"
    methods: ["GET", "POST", "DELETE"]
    file: "src/app/api/v1/documents/route.ts"
  - id: "api_itp"
    type: "api"
    name: "ITP API"
    description: "ITP operations over assets (templates/documents)"
    path: "/api/v1/itp"
    methods: ["GET", "POST", "PUT"]
    file: "src/app/api/v1/itp/route.ts"
  - id: "api_itp_generate"
    type: "api"
    name: "Generate ITP API"
    description: "Generate ITP from project data"
    path: "/api/v1/projects/[projectId]/itp/generate"
    methods: ["POST"]
    file: "src/app/api/v1/projects/[projectId]/itp/generate/route.ts"
  - id: "api_qse"
    type: "api"
    name: "QSE API"
    description: "QSE document management using assets"
    path: "/api/v1/qse"
    methods: ["GET", "POST"]
    file: "src/app/api/v1/qse/route.ts"
  - id: "api_qse_doc"
    type: "api"
    name: "QSE Document API"
    description: "Individual QSE document operations via assets"
    path: "/api/v1/qse/[docId]"
    methods: ["GET", "PUT", "DELETE"]
    file: "src/app/api/v1/qse/[docId]/route.ts"
  - id: "api_create_checkout_session"
    type: "api"
    name: "Create Checkout Session API"
    description: "Creates Stripe checkout session for subscriptions"
    path: "/api/v1/billing/checkout-session"
    methods: ["POST"]
    file: "src/app/api/v1/billing/checkout-session/route.ts"
  - id: "api_stripe_webhook"
    type: "api"
    name: "Stripe Webhook API"
    description: "Handles Stripe webhook events"
    path: "/api/v1/webhooks/stripe"
    methods: ["POST"]
    file: "src/app/api/v1/webhooks/stripe/route.ts"
  - id: "api_debug"
    type: "api"
    name: "Debug API"
    description: "Debugging and testing endpoints"
    path: "/api/v1/system/debug"
    methods: ["GET", "POST"]
    file: "src/app/api/v1/system/debug/route.ts"
  - id: "api_check_redirect_status"
    type: "api"
    name: "Check Redirect Status API"
    description: "Check redirect status for authentication"
    path: "/api/v1/auth/check-redirect-status"
    methods: ["GET"]
    file: "src/app/api/v1/auth/check-redirect-status/route.ts"
  - id: "api_check_subscription_status"
    type: "api"
    name: "Check Subscription Status API"
    description: "Check user subscription status"
    path: "/api/v1/billing/subscription-status"
    methods: ["GET"]
    file: "src/app/api/v1/billing/subscription-status/route.ts"
  - id: "api_check_webhook_status"
    type: "api"
    name: "Check Webhook Status API"
    description: "Check webhook processing status"
    path: "/api/v1/system/webhook-status"
    methods: ["GET"]
    file: "src/app/api/v1/system/webhook-status/route.ts"
  - id: "api_protected_test"
    type: "api"
    name: "Protected Test API"
    description: "Protected endpoint for testing authentication"
    path: "/api/v1/system/protected-test"
    methods: ["GET"]
    file: "src/app/api/v1/system/protected-test/route.ts"
  - id: "api_inspections"
    type: "api"
    name: "Inspections API"
    description: "Inspection Requests CRUD and scheduling via assets"
    path: "/api/v1/inspections"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/inspections/route.ts"
  - id: "api_materials"
    type: "api"
    name: "Materials API"
    description: "Material approvals, batch tickets, calibration certificates via assets"
    path: "/api/v1/materials"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/materials/route.ts"
  - id: "api_tests"
    type: "api"
    name: "Tests API"
    description: "Test requests and results lifecycle via assets"
    path: "/api/v1/tests"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/tests/route.ts"
  - id: "api_lot_closeout"
    type: "api"
    name: "Lot Closeout API"
    description: "Build and publish lot closeout packs (assets) with client delivery"
    path: "/api/v1/projects/[projectId]/lots/[lotId]/closeout"
    methods: ["GET","POST"]
    file: "src/app/api/v1/projects/[projectId]/lots/[lotId]/closeout/route.ts"
  - id: "api_hse"
    type: "api"
    name: "HSE API"
    description: "HSE operations (SWMS, permits, toolbox, safety walks, inductions, incidents, CAPA) via assets"
    path: "/api/v1/hse"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/hse/route.ts"
  - id: "api_daily_diaries"
    type: "api"
    name: "Daily Diaries API"
    description: "Field daily diary entries via assets"
    path: "/api/v1/field/daily-diaries"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/field/daily-diaries/route.ts"
  - id: "api_site_instructions"
    type: "api"
    name: "Site Instructions API"
    description: "Site instruction CRUD via assets"
    path: "/api/v1/field/site-instructions"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/field/site-instructions/route.ts"
  - id: "api_timesheets"
    type: "api"
    name: "Timesheets API"
    description: "Timesheets endpoints via assets"
    path: "/api/v1/field/timesheets"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/field/timesheets/route.ts"
  - id: "api_roster"
    type: "api"
    name: "Roster API"
    description: "Roster endpoints via assets"
    path: "/api/v1/field/roster"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/field/roster/route.ts"
  - id: "api_plant"
    type: "api"
    name: "Plant API"
    description: "Plant prestarts, maintenance, utilization via assets"
    path: "/api/v1/field/plant"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/field/plant/route.ts"
  - id: "api_approvals_workflows"
    type: "api"
    name: "Approvals Workflows API"
    description: "Approval workflow definitions and actions via assets"
    path: "/api/v1/approvals/workflows"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/approvals/workflows/route.ts"
  - id: "api_email_ingest"
    type: "api"
    name: "Email Ingest API"
    description: "Ingest journaled emails from O365/Gmail"
    path: "/api/v1/email/ingest"
    methods: ["POST"]
    file: "src/app/api/v1/email/ingest/route.ts"
  - id: "api_map"
    type: "api"
    name: "Map API"
    description: "GIS features and pins"
    path: "/api/v1/gis"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/gis/route.ts"
  - id: "api_reports"
    type: "api"
    name: "Reports API"
    description: "Dashboards and analytics"
    path: "/api/v1/reports"
    methods: ["GET"]
    file: "src/app/api/v1/reports/route.ts"
  - id: "api_quality_lots"
    type: "api"
    name: "Quality Lots API"
    description: "Work lots register; POST plan-sampling; PUT closeLot/applyIndicativeConformance (assets)"
    path: "/api/v1/projects/[projectId]/quality/lots"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/projects/[projectId]/quality/lots/route.ts"
  - id: "api_quality_hold_witness"
    type: "api"
    name: "Hold & Witness API"
    description: "GET register; POST create/notify/release/reject inspection points (assets)"
    path: "/api/v1/projects/[projectId]/quality/hold-witness"
    methods: ["GET","POST"]
    file: "src/app/api/v1/projects/[projectId]/quality/hold-witness/route.ts"
  - id: "api_quality_itp_register"
    type: "api"
    name: "ITP Register API"
    description: "GET ITP register with endorsements"
    path: "/api/v1/projects/[projectId]/quality/itp"
    methods: ["GET"]
    file: "src/app/api/v1/projects/[projectId]/quality/itp/route.ts"
  - id: "api_quality_records"
    type: "api"
    name: "Records Handover API"
    description: "GET RMP status; POST deliveries (assets)"
    path: "/api/v1/projects/[projectId]/quality/records"
    methods: ["GET","POST"]
    file: "src/app/api/v1/projects/[projectId]/quality/records/route.ts"
  - id: "api_project_compliance_config"
    type: "api"
    name: "Project Compliance Config API"
    description: "GET/POST/PUT compliance pack binding and flags"
    path: "/api/v1/projects/[projectId]/compliance/config"
    methods: ["GET","POST","PUT"]
    file: "src/app/api/v1/projects/[projectId]/compliance/config/route.ts"
  - id: "action_auth_actions"
    type: "action"
    name: "Authentication Actions"
    description: "User authentication, registration, and session management"
    file: "src/lib/actions/auth-actions.ts"
    functions: ["signInWithPassword", "signUpWithPassword", "signOut", "sendPasswordResetEmail", "resetPassword"]
  - id: "action_project_actions"
    type: "action"
    name: "Project Actions"
    description: "Project CRUD operations and management"
    file: "src/lib/actions/project-actions.ts"
    functions: ["createProject", "updateProject", "deleteProject", "createInitialProjectForUpload", "getProjects", "getProjectById"]
  - id: "action_project_actions_test"
    type: "action"
    name: "Project Actions Test"
    description: "Test version of project actions"
    file: "src/lib/actions/project-actions.test.ts"
    functions: ["testCreateProject", "testUpdateProject"]
  - id: "action_project_client_actions"
    type: "action"
    name: "Project Client Actions"
    description: "Project client relationship management"
    file: "src/lib/actions/project-client-actions.ts"
    functions: ["addProjectClient", "removeProjectClient", "getProjectClients"]
  - id: "action_document_actions"
    type: "action"
    name: "Document Actions"
    description: "Document upload, storage, and processing"
    file: "src/lib/actions/document-actions.ts"
    functions: ["generateAzureUploadUrlsAction", "notifyAzureUploadsCompleteAction", "uploadDocument", "deleteDocument", "getDocuments", "triggerProjectProcessing"]
  - id: "action_azure_actions"
    type: "action"
    name: "Azure Actions"
    description: "Azure Blob Storage operations"
    file: "src/lib/actions/azure-actions.ts"
    functions: ["uploadToAzure", "deleteFromAzure", "generateSasUrl"]
  - id: "action_langgraph_server_actions"
    type: "action"
    name: "LangGraph Server v10 Client Actions"
    description: "Low-level client/proxy for LangGraph Server v10 HTTP/WS endpoints"
    file: "src/lib/actions/langgraph-server-actions.ts"
    functions: ["runGraph", "streamRunEvents", "getRun", "createThread", "getThread", "listGraphs"]
  - id: "action_langgraph_actions"
    type: "action"
    name: "LangGraph Orchestration Actions"
    description: "High-level AI processing orchestration and provenance persistence"
    file: "src/lib/actions/langgraph-actions.ts"
    functions: ["triggerProjectProcessingViaLangGraphEnhanced", "getProcessingStatusFromLangGraph", "invokeLangGraphRun", "createLangGraphThread", "startWorkflowRun", "recordProcessingRun", "linkRunInputsOutputs"]
  - id: "action_graph_repo"
    type: "action"
    name: "Graph Repository (Central Write Path)"
    description: "Shared repository enforcing EdgeSpec validation, idempotency, invariants, classification defaults, and audit logging"
    file: "src/lib/actions/graph-repo.ts"
    functions:
      - "upsertAssetsAndEdges(IdempotentAssetWriteSpec)"
      - "validateAndWriteEdges(EdgeSpec[])"
      - "applyClassificationDefaults(asset)"
      - "emitAuditEvent(actor_user_id, action, resource_type, resource_id, details)"
      - "enforceAllowedFromTo(edge)"
      - "ensureApprovalProps(edge)"
  - id: "action_wbs_actions"
    type: "action"
    name: "WBS Actions"
    description: "WBS operations against assets"
    file: "src/lib/actions/wbs-actions.ts"
    functions: ["getWbsData", "createWbsNode", "updateWbsNode", "deleteWbsNode", "mapWbsToLbs", "generateWbsViaAI"]
  - id: "action_itp_actions"
    type: "action"
    name: "ITP Actions"
    description: "Inspection and Test Plan document operations"
    file: "src/lib/actions/itp-actions.ts"
    functions: ["createItpDocument", "updateItpDocument", "getItpDocuments", "generateItpFromTemplate", "generateItpViaAI"]
  - id: "action_itp_template_actions"
    type: "action"
    name: "ITP Template Actions"
    description: "ITP template management and immutable revisions"
    file: "src/lib/actions/itp-template-actions.ts"
    functions: ["createItpTemplate", "updateItpTemplate", "getItpTemplates", "createTemplateRevision", "getTemplateRevisions"]
  - id: "action_lot_actions"
    type: "action"
    name: "Lot Actions"
    description: "Lot management and LBS operations"
    file: "src/lib/actions/lot-actions.ts"
    functions: ["createLot", "updateLot", "getLotsForProject", "activateLot", "deactivateLot"]
  - id: "action_lot_population_actions"
    type: "action"
    name: "Lot Population Actions"
    description: "AI-generated lot creation from WBS/LBS"
    file: "src/lib/actions/lot-population-actions.ts"
    functions: ["populateLotsFromWbsLbs", "createPotentialLots", "activatePotentialLot"]
  - id: "action_lot_activation_actions"
    type: "action"
    name: "Lot Activation Actions"
    description: "Lot activation and management workflows"
    file: "src/lib/actions/lot-activation-actions.ts"
    functions: ["activateLotWithDetails", "updateLotStatus", "assignLotToUser"]
  - id: "action_lot_register_actions"
    type: "action"
    name: "Lot Register Actions"
    description: "Lot register management and reporting"
    file: "src/lib/actions/lot-register-actions.ts"
    functions: ["getLotRegisterData", "exportLotRegister", "updateLotProgress"]
  - id: "action_lot_closeout_actions"
    type: "action"
    name: "Lot Closeout Actions"
    description: "Build and publish lot closeout packs"
    file: "src/lib/actions/lot-closeout-actions.ts"
    functions: ["buildLotPack", "generateConformanceStatement", "publishLotPack"]
  - id: "action_ncr_actions"
    type: "action"
    name: "NCR Actions"
    description: "Non-Conformance Report management"
    file: "src/lib/actions/ncr-actions.ts"
    functions: ["createNcr", "updateNcr", "resolveNcr", "getNcrs", "assignNcr"]
  - id: "action_inspection_actions"
    type: "action"
    name: "Inspection Actions"
    description: "Inspection Requests lifecycle"
    file: "src/lib/actions/inspection-actions.ts"
    functions: ["createInspectionRequest", "scheduleInspection", "signOffInspection", "cancelInspection", "getInspections"]
  - id: "action_material_actions"
    type: "action"
    name: "Material Actions"
    description: "Materials approvals and traceability"
    file: "src/lib/actions/material-actions.ts"
    functions: ["createMaterialApproval", "approveMaterial", "attachBatchTicket", "recordCalibrationCertificate"]
  - id: "action_test_actions"
    type: "action"
    name: "Test Actions"
    description: "Test requests and results lifecycle"
    file: "src/lib/actions/test-actions.ts"
    functions: ["createTestRequest", "registerSample", "importLabResults", "evaluateConformance", "linkToLot"]
  - id: "action_hse_actions"
    type: "action"
    name: "HSE Actions"
    description: "HSE workflows"
    file: "src/lib/actions/hse-actions.ts"
    functions: ["createSwms", "issuePermit", "logToolboxTalk", "recordSafetyWalk", "manageInduction"]
  - id: "action_field_actions"
    type: "action"
    name: "Field Actions"
    description: "Daily diaries and site instructions"
    file: "src/lib/actions/field-actions.ts"
    functions: ["createDailyDiary", "updateDailyDiary", "createSiteInstruction", "updateSiteInstruction"]
  - id: "action_timesheet_actions"
    type: "action"
    name: "Timesheet Actions"
    description: "Timesheets"
    file: "src/lib/actions/timesheet-actions.ts"
    functions: ["createTimesheet", "approveTimesheet", "exportTimesheets"]
  - id: "action_roster_actions"
    type: "action"
    name: "Roster Actions"
    description: "Rostering"
    file: "src/lib/actions/roster-actions.ts"
    functions: ["createRoster", "updateRoster", "assignRoster"]
  - id: "action_plant_actions"
    type: "action"
    name: "Plant Actions"
    description: "Plant prestarts, maintenance and utilization"
    file: "src/lib/actions/plant-actions.ts"
    functions: ["logPlantPrestart", "recordMaintenance", "logUtilization"]
  - id: "action_approvals_engine_actions"
    type: "action"
    name: "Approvals Engine Actions"
    description: "Generalized approvals engine"
    file: "src/lib/actions/approvals-engine-actions.ts"
    functions: ["createWorkflow", "assignWorkflow", "evaluateRules", "advanceStep", "delegate", "escalate"]
  - id: "action_email_ingest_actions"
    type: "action"
    name: "Email Ingest Actions"
    description: "Parse email and thread correspondence"
    file: "src/lib/actions/email-ingest-actions.ts"
    functions: ["parseEmail", "threadCorrespondence", "ingestRawEmail"]
  - id: "action_map_actions"
    type: "action"
    name: "Map Actions"
    description: "GIS operations"
    file: "src/lib/actions/map-actions.ts"
    functions: ["upsertGeoFeature", "pinAssetToMap"]
  - id: "action_user_actions"
    type: "action"
    name: "User Actions"
    description: "User profile and account management"
    file: "src/lib/actions/user-actions.ts"
    functions: ["updateUserProfile", "updateUserEmail", "getUserProfile", "deleteUserAccount"]
  - id: "action_stripe_actions"
    type: "action"
    name: "Stripe Actions"
    description: "Stripe payment and subscription management"
    file: "src/lib/actions/stripe-actions.ts"
    functions: ["createStripeCheckoutSession", "createStripePortalSession", "processStripeCheckoutSession"]
  - id: "action_client_generic_approval"
    type: "action"
    name: "Client Generic Approval"
    description: "Generic client approval workflow"
    file: "src/lib/actions/client-generic-approval.ts"
    functions: ["submitForApproval", "approveItem", "rejectItem", "getPendingApprovals"]
  - id: "action_client_portal_actions"
    type: "action"
    name: "Client Portal Actions"
    description: "Client portal specific operations"
    file: "src/lib/actions/client-portal-actions.ts"
    functions: ["getClientProjects", "getClientProjectDetails", "submitClientApproval"]
  - id: "action_asset_actions"
    type: "action"
    name: "Asset Actions"
    description: "Project asset management (plans, reports, etc.)"
    file: "src/lib/actions/asset-actions.ts"
    functions: ["createAsset", "updateAsset", "getAssets", "deleteAsset"]
  - id: "action_holdpoint_actions"
    type: "action"
    name: "Holdpoint Actions"
    description: "Construction holdpoint management"
    file: "src/lib/actions/holdpoint-actions.ts"
    functions: ["createHoldpoint", "updateHoldpoint", "resolveHoldpoint", "getHoldpoints"]
  - id: "action_compliance_config_actions"
    type: "action"
    name: "Compliance Config Actions"
    description: "Jurisdictional pack binding and flags sync"
    file: "src/lib/actions/compliance-config-actions.ts"
    functions: ["setProjectJurisdiction", "bindCompliancePack", "updatePackFlags", "getActivePack", "deactivatePack"]
  - id: "action_inspection_point_actions"
    type: "action"
    name: "Inspection Point Actions"
    description: "Create/notify/release/reject HP/WP and SLA"
    file: "src/lib/actions/inspection-point-actions.ts"
    functions: ["createInspectionPoint", "notifyWitness", "releaseHoldPoint", "rejectHoldPoint", "setSLA"]
  - id: "action_worklot_actions"
    type: "action"
    name: "Work Lot Actions"
    description: "Sampling plan, close/reopen lot, indicative conformance"
    file: "src/lib/actions/worklot-actions.ts"
    functions: ["planSampling", "closeWorkLot", "reopenLot", "applyIndicativeConformance"]
  - id: "action_primary_testing_actions"
    type: "action"
    name: "Primary Testing Actions (NSW)"
    description: "Create primary testing contract, assign labs, schedule"
    file: "src/lib/actions/nsw/primary-testing-actions.ts"
    functions: ["createPrimaryTestingContract", "assignLab", "schedulePrimaryTests"]
  - id: "action_records_management_actions"
    type: "action"
    name: "Records Management Actions"
    description: "RMP create/update/export and delivery tracking"
    file: "src/lib/actions/records-management-actions.ts"
    functions: ["createRMP", "updateIdentifiedRecordsList", "markDelivered", "exportRMPStatus"]
  - id: "action_quarry_actions"
    type: "action"
    name: "QLD Quarry Actions"
    description: "QRS registrations, schedules, RQ number validation"
    file: "src/lib/actions/qld/quarry-actions.ts"
    functions: ["registerQuarry", "attachQRSchedule", "validateRQNumbers"]
  - id: "action_performance_actions"
    type: "action"
    name: "Performance Actions"
    description: "Analytics dashboards and performance reporting"
    file: "src/lib/actions/performance-actions.ts"
    functions: ["getAnalyticsDashboard", "exportReports", "generatePerformanceMetrics"]
  - id: "action_qse_actions"
    type: "action"
    name: "QSE Actions"
    description: "QSE document management using assets"
    file: "src/lib/actions/qse-actions.ts"
    functions: ["createQseDocument", "updateQseDocument", "getQseDocuments", "publishQseDocument"]
  - id: "service_langgraph_server_v10"
    type: "service"
    name: "LangGraph Server v10"
    description: "Dedicated LangGraph orchestration server hosting v10 graphs"
    base_url: "http://localhost:8777"
    endpoints:
      - { method: "POST", path: "/v10/threads", description: "Create a thread" }
      - { method: "GET", path: "/v10/threads/[threadId]", description: "Get a thread" }
      - { method: "POST", path: "/v10/graphs/[graph_id]/runs", description: "Start a graph run" }
      - { method: "GET", path: "/v10/runs/[run_id]", description: "Get run status" }
      - { method: "GET", path: "/v10/runs/[run_id]/events", description: "Stream run events (SSE/WS)" }
      - { method: "GET", path: "/v10/graphs", description: "List available graphs" }
    file: "langgraph_server_v10/server/app.py"
  - id: "graph_orchestrator"
    type: "graph"
    name: "Full Project Orchestration Graph"
    description: "Main AI workflow orchestrator coordinating all project processing stages"
    file: "langgraph_server_v10/graphs/orchestrator.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "document_ids", type: "Optional[List[string(uuid)]]", required: false }
      - { name: "txt_project_documents", type: "Annotated[List[Dict[str, Any]], add]", required: false, fields: ["id", "file_name", "content", "project_id"] }
    outputs:
      - { name: "wbs_structure", type: "Optional[Dict[str, Any]]", structure: ["nodes"] }
      - { name: "standards_from_project_documents", type: "List[Dict[str, Any]]", structure: ["standards"], standard_fields: ["standard_code", "uuid", "spec_name", "org_identifier", "section_reference", "context", "found_in_database", "document_ids"] }
      - { name: "edges", type: "EdgeSpec[]", description: "All provenance edges: INPUT_TO/OUTPUT_OF, GENERATED_FROM", required: false }
    stages: ["document_extraction", "project_details", "standards_extraction", "plan_generation", "wbs_extraction", "lbs_extraction", "itp_generation"]
    orchestrator_state:
      type: "OrchestratorState"
      fields: ["project_id", "document_ids", "txt_project_documents", "standards_from_project_documents", "wbs_structure"]
      reducers: ["txt_project_documents: add", "standards_from_project_documents: add"]
  - id: "graph_document_extraction"
    type: "graph"
    name: "Document Content Extraction Graph"
    description: "Extracts and processes text content from uploaded project documents"
    file: "langgraph_server_v10/graphs/document_extraction.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
    outputs:
      - { name: "txt_project_documents", type: "Annotated[List[Dict[str, Any]], add]", accumulated: true, fields: ["id", "file_name", "content", "project_id"] }
      - { name: "failed_documents", type: "Annotated[List[Dict[str, Any]], add]", accumulated: true, fields: ["uuid", "file_name", "error"] }
      - { name: "document_metadata", type: "List[Dict[str, Any]]", fields: ["name", "document_number", "revision", "type", "category"] }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    state:
      type: "ExtractionState"
      fields: ["project_id", "document_ids", "document_metadata", "txt_project_documents", "failed_documents", "error", "done"]
      reducers: ["txt_project_documents: add", "failed_documents: add"]
    capabilities: ["azure_blob_extraction", "pdf_text_extraction", "document_metadata_extraction", "parallel_processing"]
  - id: "graph_project_details"
    type: "graph"
    name: "Project Details Extraction Graph"
    description: "Extracts project metadata, parties, contacts, and key information from documents"
    file: "langgraph_server_v10/graphs/project_details.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "txt_project_documents", type: "List[Dict[str, Any]]", required: true, fields: ["id", "file_name", "content"] }
    outputs:
      - { name: "project_details", type: "Optional[Dict[str, Any]]", fields: ["project_name", "project_address", "scope", "requirements"] }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    state:
      type: "ProjectDetailsExtractionState"
      fields: ["project_id", "txt_project_documents", "project_details", "error"]
    capabilities: ["structured_text_extraction", "html_generation", "project_metadata_parsing"]
  - id: "graph_standards_extraction"
    type: "graph"
    name: "Standards Extraction Graph"
    description: "Identifies applicable quality standards, regulations, and compliance requirements"
    file: "langgraph_server_v10/graphs/standards_extraction.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "txt_project_documents", type: "List[Dict[str, Any]]", required: true, fields: ["id", "file_name", "content"] }
    outputs:
      - { name: "standards_from_project_documents", type: "List[Dict[str, Any]]", structure: ["standards"], standard_fields: ["standard_code", "uuid", "spec_name", "org_identifier", "section_reference", "context", "found_in_database", "document_ids"] }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    state:
      type: "StandardsState"
      fields: ["project_id", "txt_project_documents", "reference_database", "standards_from_project_documents", "error", "done"]
    capabilities: ["standards_identification", "regulation_analysis", "compliance_mapping", "database_lookup", "reference_matching"]
  - id: "graph_plan_generation"
    type: "graph"
    name: "Plan Generation Graph"
    description: "Generates project management plans based on standards and requirements"
    file: "langgraph_server_v10/graphs/plan_generation.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "txt_project_documents", type: "List[Dict[str, Any]]", required: true, fields: ["id", "file_name", "content"] }
    outputs:
      - { name: "plan_html", type: "Optional[str]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    state:
      type: "PlanGenerationState"
      fields: ["project_id", "plan_type", "txt_project_documents", "plan_html", "error"]
    plan_types: ["pqp"]
    capabilities: ["plan_creation", "compliance_integration", "document_generation", "html_generation", "qse_integration"]
  - id: "graph_wbs_extraction"
    type: "graph"
    name: "Work Breakdown Structure Extraction Graph"
    description: "Creates hierarchical work breakdown structure from project scope and documents"
    file: "langgraph_server_v10/graphs/wbs_extraction.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "txt_project_documents", type: "List[Dict[str, Any]]", required: true, fields: ["id", "file_name", "content"] }
    outputs:
      - { name: "wbs_structure", type: "Optional[Dict[str, Any]]", structure: ["nodes"] }
      - { name: "edges", type: "EdgeSpec[]", description: "PARENT_OF edges for WBS hierarchy", required: false }
    models:
      - { name: "WbsNode", fields: ["thinking","id","parentId","node_type","name","source_reference_uuids","source_reference_hints","source_reference_quotes","description","specification_reasoning","applicable_specifications","applicable_specification_uuids","advisory_specifications","itp_reasoning","itp_required","specific_quality_requirements","is_leaf_node"] }
      - { name: "InitialWbsGenerationResponse", fields: ["nodes"] }
    state:
      type: "WbsExtractionState"
      fields: ["project_id", "txt_project_documents", "reference_database", "wbs_structure", "error", "pqp_plan_json"]
    capabilities: ["hierarchical_decomposition", "scope_analysis", "deliverable_identification", "specification_mapping", "itp_analysis", "quality_requirements"]
  - id: "graph_lbs_extraction"
    type: "graph"
    name: "Location Breakdown Structure Extraction Graph"
    description: "Creates physical location hierarchy for construction works"
    file: "langgraph_server_v10/graphs/lbs_extraction.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "txt_project_documents", type: "List[Dict[str, Any]]", required: true, fields: ["id", "file_name", "content"] }
      - { name: "wbs_structure", type: "Optional[Dict[str, Any]]", required: false, structure: ["nodes"] }
    outputs:
      - { name: "mapping_content", type: "Optional[Dict[str, Any]]", structure: ["lot_cards"], lot_card_fields: ["lot_card_id","location_levels","location_full_path","location_depth","work_levels","work_full_path","work_depth","work_package_id","work_package_name","work_package_itp_required","work_package_itp_reference","lot_number","sequence_order","status","wbs_node_asset_id","lbs_node_asset_id","itp_asset_uid","mapping_confidence"] }
      - { name: "edges", type: "EdgeSpec[]", description: "PARENT_OF for LBS and MAPPED_TO for WBS<->LBS", required: false }
    models:
      - { name: "Level", fields: ["order","name"] }
      - { name: "LotCardAllEncompassing", fields: ["lot_card_id","location_levels","location_full_path","location_depth","work_levels","work_full_path","work_depth","work_package_id","work_package_name","work_package_itp_required","work_package_itp_reference","lot_number","sequence_order","status","wbs_node_asset_id","lbs_node_asset_id","itp_asset_uid","mapping_confidence"] }
      - { name: "LotCardsOutput", fields: ["lot_cards"] }
    state:
      type: "LbsExtractionState"
      fields: ["project_id", "txt_project_documents", "wbs_structure", "mapping_content", "error"]
    capabilities: ["location_analysis", "site_decomposition", "spatial_hierarchy", "work_package_mapping", "lot_generation"]
  - id: "graph_itp_generation"
    type: "graph"
    name: "Inspection and Test Plan Generation Graph"
    description: "Generates comprehensive inspection and test plan templates"
    file: "langgraph_server_v10/graphs/itp_generation.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "wbs_structure", type: "Optional[Dict[str, Any]]", required: false, structure: ["nodes"] }
    outputs:
      - { name: "generated_itps", type: "List[Dict[str, Any]]", fields: ["wbs_node_asset_id", "wbs_node_title", "itp_items", "asset_uid", "asset_id"] }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    models:
      - { name: "ItpItem", fields: ["thinking","id","parentId","item_no","section_name","inspection_test_point","acceptance_criteria","specification_clause","inspection_test_method","frequency","responsibility","hold_witness_point"] }
      - { name: "ItpResponse", fields: ["items"] }
    state:
      type: "ItpGenerationState"
      fields: ["project_id", "wbs_structure", "wbs_nodes_for_itp", "generated_itps", "error"]
    capabilities: ["quality_procedures", "inspection_planning", "testing_requirements", "specification_compliance", "hold_point_management"]
  - id: "graph_conformance_checker"
    type: "graph"
    name: "Conformance Checker Graph"
    description: "Evaluates test results vs acceptance criteria and opens NCR on fail"
    file: "langgraph_server_v10/graphs/conformance_checker.py"
    inputs:
      - { name: "test_results", type: "List[Dict[str, Any]]", description: "Test result assets payload" }
    outputs:
      - { name: "conformance_report", type: "Dict[str, Any]", description: "Summary of pass/fail and NCR actions" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["rule_engine", "spec_lookup", "ncr_auto_creation"]
  - id: "graph_email_ingest"
    type: "graph"
    name: "Email Ingest Graph"
    description: "Parses MIME emails, threads correspondence, references assets"
    file: "langgraph_server_v10/graphs/email_ingest.py"
    inputs:
      - { name: "project_id", type: "string(uuid)" }
      - { name: "raw_mime", type: "string" }
    outputs:
      - { name: "correspondence_asset_id", type: "string(uuid)" }
      - { name: "thread_key", type: "string" }
      - { name: "message_id", type: "string" }
      - { name: "in_reply_to", type: "string" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["mime_parse", "threading", "reference_detection"]
  - id: "graph_approvals_engine"
    type: "graph"
    name: "Approvals Engine Graph"
    description: "Evaluates approval rules and advances workflow"
    file: "langgraph_server_v10/graphs/approvals_engine.py"
    inputs:
      - { name: "workflow_assignment_id", type: "string(uuid)" }
    outputs:
      - { name: "new_status", type: "string" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["rule_eval", "sla_monitoring", "delegation"]
  - id: "graph_document_structure"
    type: "graph"
    name: "Document Structure Analysis Graph"
    description: "Analyzes document structure and organization patterns"
    file: "langgraph_server_v10/graphs/document_structure_analysis.py"
    inputs: ["documents"]
    outputs: ["structure_analysis"]
    capabilities: ["structure_analysis", "pattern_recognition", "document_organization"]
  - id: "graph_qse_document_processor"
    type: "graph"
    name: "QSE Document Processing Graph"
    description: "Processes and manages corporate QSE documents"
    file: "langgraph_server_v10/graphs/qse_document_processor.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "company_profile", type: "Dict[str, Any]", required: true }
      - { name: "target_docs", type: "Optional[List[str]]", required: false }
    outputs:
      - { name: "results", type: "List[Dict[str, Any]]", fields: ["document_number", "title"] }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    models:
      - { name: "QseDocument", fields: ["title", "document_number", "revision", "html", "metadata"] }
    state:
      type: "GenerationState"
      fields: ["project_id", "company_profile", "target_docs", "results", "error"]
    qse_document_types: ["policy", "procedure", "form", "template", "register", "statement", "plan", "matrix", "minutes", "report"]
    capabilities: ["document_processing", "version_control", "compliance_checking", "html_generation", "corporate_branding"]
  - id: "graph_simple_tester"
    type: "graph"
    name: "Simple Testing Graph"
    description: "Simple testing and validation for development"
    file: "langgraph_server_v10/graphs/simple_tester.py"
    inputs: ["test_inputs"]
    outputs: ["test_outputs"]
    capabilities: ["basic_testing", "validation"]
  - id: "graph_jurisdiction_resolver"
    type: "graph"
    name: "Jurisdiction Resolver Graph"
    description: "Resolves project jurisdiction based on address and documents and binds compliance pack"
    file: "langgraph_server_v10/graphs/jurisdiction_resolver.py"
    inputs:
      - { name: "project_details", type: "Dict[str, Any]" }
      - { name: "documents", type: "List[Dict[str, Any]]" }
    outputs:
      - { name: "standards_profile", type: "Dict[str, Any]" }
      - { name: "project_compliance_config", type: "Dict[str, Any]" }
      - { name: "bound_compliance_pack", type: "Dict[str, Any]" }
    capabilities: ["geocoding", "regulatory_mapping", "pack_binding"]
  - id: "graph_standards_resolver"
    type: "graph"
    name: "Standards Resolver Graph"
    description: "Resolves applicable standards profile based on jurisdiction"
    file: "langgraph_server_v10/graphs/standards_resolver.py"
    inputs: ["jurisdiction", "industry"]
    outputs: ["standards_profile"]
    capabilities: ["standards_selection", "policy_mapping"]
  - id: "graph_template_variant_selector"
    type: "graph"
    name: "Template Variant Selector Graph"
    description: "Selects appropriate ITP template variant per context"
    file: "langgraph_server_v10/graphs/template_variant_selector.py"
    inputs: ["wbs_structure", "standards_profile"]
    outputs: ["template_variant"]
    capabilities: ["retrieval", "similarity_matching"]
  - id: "graph_compliance_checker"
    type: "graph"
    name: "Compliance Checker Graph"
    description: "Checks generated assets for compliance against standards"
    file: "langgraph_server_v10/graphs/compliance_checker.py"
    inputs: ["assets", "standards_profile"]
    outputs: ["compliance_report"]
    capabilities: ["validation", "rule_engine", "nl_evaluation"]
  - id: "graph_sampling_planner"
    type: "graph"
    name: "NSW Sampling Planner Graph"
    description: "Generates Annex L sampling plans and sample assets for NSW Q6"
    file: "langgraph_server_v10/graphs/sampling_planner.py"
    inputs:
      - { name: "project_id", type: "string(uuid)" }
      - { name: "lot_geometry", type: "Dict[str, Any]" }
      - { name: "itp_document", type: "Dict[str, Any]" }
    outputs:
      - { name: "sampling_plan", type: "Dict[str, Any]" }
      - { name: "sample_assets", type: "List[string(uuid)]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["annex_l_sampling", "grid_planning", "geo_offsets"]
  - id: "graph_itp_completeness_checker"
    type: "graph"
    name: "ITP Completeness Checker Graph"
    description: "Evaluates coverage of required points and endorsement status"
    file: "langgraph_server_v10/graphs/itp_completeness_checker.py"
    inputs:
      - { name: "project_id", type: "string(uuid)" }
      - { name: "itp_assets", type: "List[string(uuid)]" }
    outputs:
      - { name: "conformance_check", type: "Dict[str, Any]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["coverage_check", "endorsement_check"]
  - id: "graph_rmp_validator"
    type: "graph"
    name: "RMP Validator Graph (NSW)"
    description: "Validates Identified Records delivery against pack rules"
    file: "langgraph_server_v10/graphs/rmp_validator.py"
    inputs:
      - { name: "project_id", type: "string(uuid)" }
      - { name: "rmp_asset_id", type: "string(uuid)" }
    outputs:
      - { name: "rmp_validation", type: "Dict[str, Any]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["records_mapping", "delivery_checks"]
  - id: "graph_holdpoint_compliance_checker"
    type: "graph"
    name: "Holdpoint Compliance Checker Graph"
    description: "Verifies HP/WP trails prior to status changes"
    file: "langgraph_server_v10/graphs/holdpoint_compliance_checker.py"
    inputs:
      - { name: "lot_id", type: "string(uuid)" }
      - { name: "inspection_points", type: "List[string(uuid)]" }
    outputs:
      - { name: "hp_wp_report", type: "Dict[str, Any]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["trail_verification", "gate_checks"]
  - id: "graph_qrs_validator"
    type: "graph"
    name: "QLD QRS Validator Graph"
    description: "Validates QRS RQ numbers and schedules"
    file: "langgraph_server_v10/graphs/qrs_validator.py"
    inputs:
      - { name: "test_results", type: "List[string(uuid)]" }
      - { name: "qrs_schedule", type: "Dict[str, Any]" }
    outputs:
      - { name: "qrs_validation_report", type: "Dict[str, Any]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["rq_number_checks", "schedule_verify"]
  - id: "graph_metadata_generator"
    type: "graph"
    name: "Metadata Generator Graph"
    description: "Generates metadata cards and mappings"
    file: "langgraph_server_v10/graphs/metadata_generator.py"
    inputs: ["assets"]
    outputs: ["metadata_cards"]
    capabilities: ["metadata_generation"]
  - id: "graph_db_fetcher"
    type: "graph"
    name: "DB Fetcher Graph"
    description: "Fetches data needed by other graphs"
    file: "langgraph_server_v10/graphs/db_fetcher.py"
    inputs: ["queries"]
    outputs: ["records"]
    capabilities: ["db_access"]
  - id: "graph_db_updater"
    type: "graph"
    name: "DB Updater Graph"
    description: "Updates data in DB when required by automation"
    file: "langgraph_server_v10/graphs/db_updater.py"
    inputs: ["updates"]
    outputs: ["result"]
    capabilities: ["db_access"]
  - id: "graph_azure_storage"
    type: "graph"
    name: "Azure Storage Graph"
    description: "Interacts with Azure Blob Storage for document operations"
    file: "langgraph_server_v10/graphs/azure_storage.py"
    inputs: ["operations"]
    outputs: ["results"]
    capabilities: ["azure_blob"]
  - id: "graph_email_ingest"
    type: "graph"
    name: "Email Ingest Graph"
    description: "Parses MIME emails, threads correspondence, references assets"
    file: "langgraph_server_v10/graphs/email_ingest.py"
    inputs:
      - { name: "project_id", type: "string(uuid)" }
      - { name: "raw_mime", type: "string" }
    outputs:
      - { name: "correspondence_asset_id", type: "string(uuid)" }
      - { name: "thread_key", type: "string" }
      - { name: "message_id", type: "string" }
      - { name: "in_reply_to", type: "string" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["mime_parse", "threading", "reference_detection"]
  - id: "graph_approvals_engine"
    type: "graph"
    name: "Approvals Engine Graph"
    description: "Evaluates approval rules and advances workflow"
    file: "langgraph_server_v10/graphs/approvals_engine.py"
    inputs:
      - { name: "workflow_assignment_id", type: "string(uuid)" }
    outputs:
      - { name: "new_status", type: "string" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["rule_eval", "sla_monitoring", "delegation"]
  - id: "graph_document_structure"
    type: "graph"
    name: "Document Structure Analysis Graph"
    description: "Analyzes document structure and organization patterns"
    file: "langgraph_server_v10/graphs/document_structure_analysis.py"
    inputs: ["documents"]
    outputs: ["structure_analysis"]
    capabilities: ["structure_analysis", "pattern_recognition", "document_organization"]
  - id: "graph_qse_document_processor"
    type: "graph"
    name: "QSE Document Processing Graph"
    description: "Processes and manages corporate QSE documents"
    file: "langgraph_server_v10/graphs/qse_document_processor.py"
    inputs:
      - { name: "project_id", type: "string(uuid)", required: true }
      - { name: "company_profile", type: "Dict[str, Any]", required: true }
      - { name: "target_docs", type: "Optional[List[str]]", required: false }
    outputs:
      - { name: "results", type: "List[Dict[str, Any]]", fields: ["document_number", "title"] }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    models:
      - { name: "QseDocument", fields: ["title", "document_number", "revision", "html", "metadata"] }
    state:
      type: "GenerationState"
      fields: ["project_id", "company_profile", "target_docs", "results", "error"]
    qse_document_types: ["policy", "procedure", "form", "template", "register", "statement", "plan", "matrix", "minutes", "report"]
    capabilities: ["document_processing", "version_control", "compliance_checking", "html_generation", "corporate_branding"]
  - id: "graph_simple_tester"
    type: "graph"
    name: "Simple Testing Graph"
    description: "Simple testing and validation for development"
    file: "langgraph_server_v10/graphs/simple_tester.py"
    inputs: ["test_inputs"]
    outputs: ["test_outputs"]
    capabilities: ["basic_testing", "validation"]
  - id: "graph_jurisdiction_resolver"
    type: "graph"
    name: "Jurisdiction Resolver Graph"
    description: "Resolves project jurisdiction based on address and documents and binds compliance pack"
    file: "langgraph_server_v10/graphs/jurisdiction_resolver.py"
    inputs:
      - { name: "project_details", type: "Dict[str, Any]" }
      - { name: "documents", type: "List[Dict[str, Any]]" }
    outputs:
      - { name: "standards_profile", type: "Dict[str, Any]" }
      - { name: "project_compliance_config", type: "Dict[str, Any]" }
      - { name: "bound_compliance_pack", type: "Dict[str, Any]" }
    capabilities: ["geocoding", "regulatory_mapping", "pack_binding"]
  - id: "graph_standards_resolver"
    type: "graph"
    name: "Standards Resolver Graph"
    description: "Resolves applicable standards profile based on jurisdiction"
    file: "langgraph_server_v10/graphs/standards_resolver.py"
    inputs: ["jurisdiction", "industry"]
    outputs: ["standards_profile"]
    capabilities: ["standards_selection", "policy_mapping"]
  - id: "graph_template_variant_selector"
    type: "graph"
    name: "Template Variant Selector Graph"
    description: "Selects appropriate ITP template variant per context"
    file: "langgraph_server_v10/graphs/template_variant_selector.py"
    inputs: ["wbs_structure", "standards_profile"]
    outputs: ["template_variant"]
    capabilities: ["retrieval", "similarity_matching"]
  - id: "graph_compliance_checker"
    type: "graph"
    name: "Compliance Checker Graph"
    description: "Checks generated assets for compliance against standards"
    file: "langgraph_server_v10/graphs/compliance_checker.py"
    inputs: ["assets", "standards_profile"]
    outputs: ["compliance_report"]
    capabilities: ["validation", "rule_engine", "nl_evaluation"]
  - id: "graph_sampling_planner"
    type: "graph"
    name: "NSW Sampling Planner Graph"
    description: "Generates Annex L sampling plans and sample assets for NSW Q6"
    file: "langgraph_server_v10/graphs/sampling_planner.py"
    inputs:
      - { name: "project_id", type: "string(uuid)" }
      - { name: "lot_geometry", type: "Dict[str, Any]" }
      - { name: "itp_document", type: "Dict[str, Any]" }
    outputs:
      - { name: "sampling_plan", type: "Dict[str, Any]" }
      - { name: "sample_assets", type: "List[string(uuid)]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["annex_l_sampling", "grid_planning", "geo_offsets"]
  - id: "graph_itp_completeness_checker"
    type: "graph"
    name: "ITP Completeness Checker Graph"
    description: "Evaluates coverage of required points and endorsement status"
    file: "langgraph_server_v10/graphs/itp_completeness_checker.py"
    inputs:
      - { name: "project_id", type: "string(uuid)" }
      - { name: "itp_assets", type: "List[string(uuid)]" }
    outputs:
      - { name: "conformance_check", type: "Dict[str, Any]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["coverage_check", "endorsement_check"]
  - id: "graph_rmp_validator"
    type: "graph"
    name: "RMP Validator Graph (NSW)"
    description: "Validates Identified Records delivery against pack rules"
    file: "langgraph_server_v10/graphs/rmp_validator.py"
    inputs:
      - { name: "project_id", type: "string(uuid)" }
      - { name: "rmp_asset_id", type: "string(uuid)" }
    outputs:
      - { name: "rmp_validation", type: "Dict[str, Any]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["records_mapping", "delivery_checks"]
  - id: "graph_holdpoint_compliance_checker"
    type: "graph"
    name: "Holdpoint Compliance Checker Graph"
    description: "Verifies HP/WP trails prior to status changes"
    file: "langgraph_server_v10/graphs/holdpoint_compliance_checker.py"
    inputs:
      - { name: "lot_id", type: "string(uuid)" }
      - { name: "inspection_points", type: "List[string(uuid)]" }
    outputs:
      - { name: "hp_wp_report", type: "Dict[str, Any]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["trail_verification", "gate_checks"]
  - id: "graph_qrs_validator"
    type: "graph"
    name: "QLD QRS Validator Graph"
    description: "Validates QRS RQ numbers and schedules"
    file: "langgraph_server_v10/graphs/qrs_validator.py"
    inputs:
      - { name: "test_results", type: "List[string(uuid)]" }
      - { name: "qrs_schedule", type: "Dict[str, Any]" }
    outputs:
      - { name: "qrs_validation_report", type: "Dict[str, Any]" }
      - { name: "edges", type: "EdgeSpec[]", required: false }
    capabilities: ["rq_number_checks", "schedule_verify"]
  - id: "graph_metadata_generator"
    type: "graph"
    name: "Metadata Generator Graph"
    description: "Generates metadata cards and mappings"
    file: "langgraph_server_v10/graphs/metadata_generator.py"
    inputs: ["assets"]
    outputs: ["metadata_cards"]
    capabilities: ["metadata_generation"]
  - id: "graph_db_fetcher"
    type: "graph"
    name: "DB Fetcher Graph"
    description: "Fetches data needed by other graphs"
    file: "langgraph_server_v10/graphs/db_fetcher.py"
    inputs: ["queries"]
    outputs: ["records"]
    capabilities: ["db_access"]
  - id: "graph_db_updater"
    type: "graph"
    name: "DB Updater Graph"
    description: "Updates data in DB when required by automation"
    file: "langgraph_server_v10/graphs/db_updater.py"
    inputs: ["updates"]
    outputs: ["result"]
    capabilities: ["db_access"]
  - id: "graph_azure_storage"
    type: "graph"
    name: "Azure Storage Graph"
    description: "Interacts with Azure Blob Storage for document operations"
    file: "langgraph_server_v10/graphs/azure_storage.py"
    inputs: ["operations"]
    outputs: ["results"]
    capabilities: ["azure_blob"]
  - id: "table_organizations"
    type: "table"
    name: "organizations"
    description: "Tenant organizations"
    schema: "public"
    fields: ["id uuid pk", "name text", "domain text", "metadata jsonb default '{}'", "created_at timestamptz default now()", "updated_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)"]
    indexes: ["btree(name)"]
  - id: "table_roles"
    type: "table"
    name: "roles"
    description: "Global role definitions"
    schema: "public"
    fields: ["id uuid pk", "code text unique", "name text", "description text", "created_at timestamptz default now()", "updated_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "UNIQUE (code)"]
  - id: "table_permissions"
    type: "table"
    name: "permissions"
    description: "Permission catalog"
    schema: "public"
    fields: ["id uuid pk", "code text unique", "name text", "description text", "created_at timestamptz default now()", "updated_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "UNIQUE (code)"]
  - id: "table_role_permissions"
    type: "table"
    name: "role_permissions"
    description: "Role to permission mapping"
    schema: "public"
    fields: ["id uuid pk", "role_id uuid", "permission_id uuid"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (role_id) REFERENCES roles(id)", "FOREIGN KEY (permission_id) REFERENCES permissions(id)", "UNIQUE (role_id, permission_id)"]
  - id: "table_organization_users"
    type: "table"
    name: "organization_users"
    description: "Organization membership for users"
    schema: "public"
    fields: ["id uuid pk", "organization_id uuid", "user_id uuid", "role_id uuid", "attributes jsonb default '{}'", "created_at timestamptz default now()", "updated_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (organization_id) REFERENCES organizations(id)", "UNIQUE (organization_id, user_id)"]
    indexes: ["btree(organization_id)"]
  - id: "table_projects"
    type: "table"
    name: "projects"
    description: "Main project records with metadata and jurisdiction settings cache"
    schema: "public"
    fields: ["id uuid pk", "name text", "description text", "location text", "client_name text", "created_by_user_id uuid", "status text", "created_at timestamptz default now()", "updated_at timestamptz default now()", "organization_id uuid", "settings jsonb default '{}'"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (organization_id) REFERENCES organizations(id)"]
  - id: "table_project_members"
    type: "table"
    name: "project_members"
    description: "Project level membership with ABAC attributes"
    schema: "public"
    fields: ["id uuid pk", "project_id uuid", "user_id uuid", "role_id uuid", "permissions text[]", "abac_attributes jsonb default '{}'", "created_at timestamptz default now()", "updated_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (project_id) REFERENCES projects(id)", "UNIQUE (project_id, user_id)"]
    indexes: ["btree(project_id)", "GIN (abac_attributes)"]
  - id: "table_documents"
    type: "table"
    name: "documents"
    description: "Project document metadata and Azure storage references (with natural keys)"
    schema: "public"
    fields: ["id uuid pk", "project_id uuid", "asset_id uuid", "blob_url text", "storage_path text", "file_name text", "content_type text", "size bigint", "source_hash text", "document_number text", "revision_code text", "transmittal_number text", "revision_date timestamptz", "doc_type text", "distribution_list text[]", "distribution_matrix jsonb default '{}'", "metadata jsonb default '{}'", "processing_status text default 'uploaded'", "raw_content text", "structured_output jsonb default '{}'", "llm_scope_output jsonb default '{}'", "llm_summary jsonb default '{}'", "created_at timestamptz default now()", "updated_at timestamptz default now()", "uploaded_by uuid"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (project_id) REFERENCES projects(id)", "FOREIGN KEY (asset_id) REFERENCES assets(id)", "UNIQUE (project_id, source_hash) WHERE source_hash IS NOT NULL", "UNIQUE (document_number, revision_code) WHERE document_number IS NOT NULL AND revision_code IS NOT NULL", "UNIQUE (transmittal_number) WHERE transmittal_number IS NOT NULL"]
  - id: "table_assets"
    type: "table"
    name: "assets"
    description: "All assets with single-table immutable versioning and governed type/subtype"
    schema: "public"
    fields:
      - "id uuid pk"
      - "asset_uid uuid not null"
      - "version int not null"
      - "is_current boolean default true"
      - "supersedes_asset_id uuid"
      - "version_label text"
      - "effective_from timestamptz"
      - "effective_to timestamptz"
      - "type text not null"
      - "subtype text"
      - "name text not null"
      - "organization_id uuid not null"
      - "project_id uuid"
      - "parent_asset_id uuid"
      - "document_number text"
      - "revision_code text"
      - "path_key text"
      - "status text default 'draft'"
      - "approval_state text default 'not_required'"
      - "classification text default 'internal'"
      - "idempotency_key text"
      - "metadata jsonb default '{}'"
      - "content jsonb default '{}'"
      - "due_sla_at timestamptz generated always as ((NULLIF(content->>'sla_due_at',''))::timestamptz) stored"
      - "scheduled_at timestamptz generated always as ((NULLIF(content->>'scheduled_at',''))::timestamptz) stored"
      - "requested_for_at timestamptz generated always as ((NULLIF(content->>'requested_for',''))::timestamptz) stored"
      - "created_at timestamptz default now()"
      - "created_by uuid"
      - "updated_at timestamptz default now()"
      - "updated_by uuid"
      - "is_deleted boolean default false"
    constraints:
      - "PRIMARY KEY (id)"
      - "UNIQUE (asset_uid, version)"
      - "UNIQUE (asset_uid) WHERE is_current"
      - "UNIQUE (project_id, type, idempotency_key) WHERE idempotency_key IS NOT NULL"
      - "CHECK (type IN ('project','document','drawing','spec','correspondence','email','memo','meeting_minute','rfi','material','mix_design','msds','calibration_certificate','batch_ticket','plan','wbs_node','lbs_node','itp_template','itp_document','lot','inspection_point','inspection_request','inspection_signature','inspection_schedule','test_request','sample','lab','test_method','test_result','measurement','ncr','risk','hazard','control','requirement','standard','clause','policy','procedure','work_instruction','form','record','audit','audit_finding','capa','incident','task','decision','comment','user','role','organization','geo_feature','photo','embedding','processing_run','swms','jsa','permit','toolbox_talk','safety_walk','induction','approval_workflow','rule','retention_policy','legal_hold','compliance_pack','project_compliance_config','daily_diary','site_instruction','timesheet','roster','plant_prestart','maintenance_record','utilization_log'))"
    indexes:
      - "btree (organization_id)"
      - "btree (project_id)"
      - "btree (type, subtype)"
      - "btree (status, approval_state)"
      - "btree (due_sla_at) WHERE type IN ('inspection_request','inspection_point','test_request')"
      - "btree (scheduled_at) WHERE type IN ('inspection_request','inspection_schedule')"
      - "btree (requested_for_at) WHERE type IN ('inspection_request')"
      - "GIN (metadata)"
      - "GIN (content)"
      - "GIN (content) WHERE type='inspection_point'"
      - "GIN (content) WHERE type='test_result'"
      - "UNIQUE (project_id, path_key) WHERE type IN ('wbs_node','lbs_node')"
      - "UNIQUE (project_id, document_number, revision_code) WHERE type IN ('document','spec','drawing')"
  - id: "table_asset_edges"
    type: "table"
    name: "asset_edges"
    description: "Typed edges enabling rich graph semantics; relationships stored here"
    schema: "public"
    fields: ["id uuid pk", "from_asset_id uuid not null", "to_asset_id uuid not null", "edge_type text not null", "properties jsonb default '{}'", "idempotency_key text", "created_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (from_asset_id) REFERENCES assets(id)", "FOREIGN KEY (to_asset_id) REFERENCES assets(id)", "CHECK (edge_type IN ('PARENT_OF','PART_OF','INSTANCE_OF','TEMPLATE_FOR','VERSION_OF','SUPERSEDES','ALIAS_OF','BELONGS_TO_PROJECT','LOCATED_IN_LBS','COVERS_WBS','APPLIES_TO','MAPPED_TO','RELATED_TO','GOVERNED_BY','IMPLEMENTS','EVIDENCES','VIOLATES','SATISFIES','CONSTRAINED_BY','APPROVED_BY','REVIEWED_BY','OWNED_BY','ASSIGNED_TO','REPORTED_BY','RESOLVED_BY','CLOSES','REFERENCES','CITES','QUOTES','SUMMARIZES','EXTRACTS','ANNOTATES','TAGS','DEPENDS_ON','BLOCKED_BY','REPLACES','DUPLICATES','CONTEXT_FOR','INPUT_TO','OUTPUT_OF','GENERATED_FROM'))", "UNIQUE (edge_type, idempotency_key) WHERE idempotency_key IS NOT NULL"]
    indexes: ["btree (from_asset_id)", "btree (to_asset_id)", "btree (edge_type)", "btree (edge_type, from_asset_id)", "btree (edge_type, to_asset_id)", "GIN (properties)"]
    invariants:
      - "PARENT_OF acyclic; enforced by path-check trigger"
      - "BELONGS_TO_PROJECT: at most one per asset; derived from asset.project_id"
      - "MAPPED_TO only wbs_node <-> lbs_node; properties must include strength[0..1], rationale"
      - "APPROVED_BY/REVIEWED_BY: to must be user|role asset; timestamps required on properties"
      - "CONTEXT_FOR/INPUT_TO/OUTPUT_OF: one vertex must be processing_run asset"
      - "BLOCKED_BY: lot|itp_document blocked by inspection_point|control|procedure|policy; if inspection_point then content.point_type='hold'"
  - id: "table_processing_runs"
    type: "table"
    name: "processing_runs"
    description: "LLM/graph run records with full reproducibility and validation status"
    schema: "public"
    fields: ["id uuid pk", "run_uid uuid unique", "project_id uuid", "agent_id text", "model text", "model_version text", "prompt_hash text", "params jsonb default '{}'", "retries int default 0", "latency_ms int", "input_tokens int", "output_tokens int", "cost numeric(12,6)", "confidence numeric(3,2)", "validator_status text", "reviewer_id uuid", "thread_id text", "run_id text", "status text default 'completed'", "started_at timestamptz default now()", "ended_at timestamptz"]
    constraints: ["PRIMARY KEY (id)", "UNIQUE (run_uid)", "FOREIGN KEY (project_id) REFERENCES projects(id)"]
  - id: "table_asset_embeddings"
    type: "table"
    name: "asset_embeddings"
    description: "Embeddings for semantic search and RAG over assets"
    schema: "public"
    fields: ["id uuid pk", "asset_id uuid", "embedding vector(1536)", "created_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (asset_id) REFERENCES assets(id)"]
    indexes: ["ivfflat (embedding) WITH (lists=100)"]
  - id: "table_events"
    type: "table"
    name: "events"
    description: "CDC-like event log for BI/reporting"
    schema: "public"
    fields: ["id uuid pk", "project_id uuid", "source_table text", "record_id uuid", "event_type text", "payload jsonb", "occurred_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)"]
    indexes: ["btree(project_id)","btree(occurred_at)","btree(source_table)"]
  - id: "table_audit_events"
    type: "table"
    name: "audit_events"
    description: "Immutable append-only audit trail"
    schema: "public"
    fields: ["id uuid pk", "project_id uuid", "actor_user_id uuid", "action text", "resource_type text", "resource_id uuid", "details jsonb", "created_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)"]
    indexes: ["btree(project_id)","btree(created_at)"]
  - id: "table_retention_policies"
    type: "table"
    name: "retention_policies"
    description: "Records retention policies (governance side-table)"
    schema: "public"
    fields: ["id uuid pk", "project_id uuid", "asset_id uuid", "policy_name text", "classification text", "retention_years int", "legal_hold_override boolean default false", "metadata jsonb default '{}'", "created_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (asset_id) REFERENCES assets(id)"]
  - id: "table_legal_holds"
    type: "table"
    name: "legal_holds"
    description: "Legal hold records (governance side-table)"
    schema: "public"
    fields: ["id uuid pk", "project_id uuid", "asset_id uuid", "hold_reason text", "issued_by text", "issued_at timestamptz", "status text", "metadata jsonb default '{}'"
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (asset_id) REFERENCES assets(id)"]
  - id: "table_webhooks_outbound"
    type: "table"
    name: "webhooks_outbound"
    description: "Outbound webhook configurations"
    schema: "public"
    fields: ["id uuid pk", "project_id uuid", "target_url text", "event_filter text", "secret text", "status text", "created_at timestamptz default now()", "updated_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)"]
  - id: "table_correspondence_threads"
    type: "table"
    name: "correspondence_threads"
    description: "Operational threading for correspondence"
    schema: "public"
    fields: ["id uuid pk", "project_id uuid", "asset_id uuid", "thread_key text", "last_message_at timestamptz", "participants text[]", "metadata jsonb default '{}'", "created_at timestamptz default now()", "updated_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "UNIQUE (project_id, thread_key)", "FOREIGN KEY (asset_id) REFERENCES assets(id)"]
    indexes: ["btree(project_id, thread_key)", "btree(last_message_at)"]
  - id: "table_project_feature_flags"
    type: "table"
    name: "project_feature_flags"
    description: "Cached feature flags from bound compliance pack"
    schema: "public"
    fields: ["id uuid pk", "pack_asset_uid uuid", "flags jsonb default '{}'", "updated_at timestamptz default now()"]
    constraints: ["PRIMARY KEY (id)", "FOREIGN KEY (pack_asset_uid) REFERENCES assets(id)"]
  - id: "prompt_project_details_extraction"
    type: "prompt"
    name: "Project Details Extraction Prompt"
    description: "Comprehensive prompt for extracting project metadata and HTML"
    file: "langgraph_server_v10/prompts/project_details_prompt.py"
    content: "Comprehensive prompt for extracting project metadata, parties, contacts and generating HTML body."
    graph: "graph_project_details"
    capabilities: ["metadata_extraction", "contact_extraction", "party_identification", "html_generation"]
  - id: "prompt_wbs_extraction"
    type: "prompt"
    name: "WBS Extraction Prompt"
    description: "Detailed prompt for creating hierarchical work breakdown structure"
    file: "langgraph_server_v10/prompts/wbs_extraction_prompt.py"
    content: "Detailed prompt for WBS creation with hierarchical structure design and deliverables"
    graph: "graph_wbs_extraction"
    capabilities: ["scope_analysis", "work_decomposition", "deliverable_identification", "source_referencing"]
  - id: "prompt_standards_extraction"
    type: "prompt"
    name: "Standards Extraction Prompt"
    description: "Prompt for identifying applicable technical standards"
    file: "langgraph_server_v10/prompts/standards_extraction_prompt.py"
    content: "Technical standards extraction prompt with reference database matching and compliance analysis"
    graph: "graph_standards_extraction"
    capabilities: ["standards_identification", "compliance_analysis", "regulatory_mapping"]
  - id: "prompt_lbs_extraction"
    type: "prompt"
    name: "LBS Extraction Prompt"
    description: "Prompt for creating location breakdown structure"
    file: "langgraph_server_v10/prompts/lbs_extraction_prompt.py"
    content: "Spatial analysis prompt for LBS creation with location mapping to WBS"
    graph: "graph_lbs_extraction"
    capabilities: ["location_analysis", "site_decomposition", "spatial_hierarchy", "construction_logic"]
  - id: "prompt_itp_generation"
    type: "prompt"
    name: "ITP Generation Prompt"
    description: "Prompt for generating inspection and test plan templates"
    file: "langgraph_server_v10/prompts/itp_generation_prompt.py"
    content: "Generate ITP based on: {input}"
    graph: "graph_itp_generation"
    capabilities: ["quality_procedures", "inspection_planning", "testing_requirements"]
  - id: "prompt_conformance_rule_engine"
    type: "prompt"
    name: "Conformance Rule Engine Prompt"
    description: "Evaluate test results against acceptance criteria"
    file: "langgraph_server_v10/prompts/conformance_rule_engine.py"
    content: "Evaluate test results vs method acceptance_criteria; output pass/fail and NCR actions."
    graph: "graph_conformance_checker"
    capabilities: ["rule_eval","conformance_decision"]
  - id: "prompt_email_parsing"
    type: "prompt"
    name: "Email Parsing Prompt"
    description: "Parse MIME email to extract participants, thread key, references and attachments"
    file: "langgraph_server_v10/prompts/email_parsing.py"
    content: "Parse email MIME; produce normalized JSON with subject, participants, thread key, references."
    graph: "graph_email_ingest"
    capabilities: ["mime_parse","reference_linking"]
  - id: "prompt_approvals_rules"
    type: "prompt"
    name: "Approvals Rules Prompt"
    description: "Evaluate approval workflow rules and next actions"
    file: "langgraph_server_v10/prompts/approvals_rules.py"
    content: "Given workflow definition and context, compute next approver, SLA, escalations, and transitions."
    graph: "graph_approvals_engine"
    capabilities: ["rule_eval","sla_logic"]
  - id: "tool_db_connection"
    type: "tool"
    name: "Database Connection Tool"
    description: "Provides database access for graphs"
  - id: "tool_azure_storage"
    type: "tool"
    name: "Azure Storage Tool"
    description: "Provides Azure Blob Storage operations"
  - id: "tool_metadata_generator"
    type: "tool"
    name: "Metadata Generator Tool"
    description: "Generates metadata cards and mappings"
  - id: "tool_cache_management"
    type: "tool"
    name: "Cache Management Tool"
    description: "Caches and retrieves documents for performance"
  - id: "tool_mime_parser"
    type: "tool"
    name: "MIME Parser"
    description: "Parse raw MIME emails and attachments"
  - id: "tool_calendar_scheduler"
    type: "tool"
    name: "Calendar Scheduler"
    description: "Compute scheduling windows and avoid conflicts"
  - id: "tool_sla_notifier"
    type: "tool"
    name: "SLA Notifier"
    description: "Send reminders and escalation notifications"
  - id: "tool_gis"
    type: "tool"
    name: "GIS Tool"
    description: "Geospatial indexing and map tile services"
  - id: "ims_iso9001"
    type: "ims_doc"
    name: "ISO 9001:2015"
    description: "Quality Management Systems - Requirements"
    clauses: ["4.1", "4.2", "5.1", "7.1", "8.1", "9.1", "10.3"]
  - id: "ims_iso14001"
    type: "ims_doc"
    name: "ISO 14001:2015"
    description: "Environmental Management Systems - Requirements"
    clauses: ["4.1", "4.2", "5.1", "6.1", "9.1"]
  - id: "ims_iso45001"
    type: "ims_doc"
    name: "ISO 45001:2018"
    description: "Occupational Health and Safety Management Systems"
    clauses: ["4.1", "5.1", "6.1", "8.1"]
  - id: "ims_iso27001"
    type: "ims_doc"
    name: "ISO/IEC 27001"
    description: "Information Security Management Systems"
    clauses: []
  - id: "ims_iso31000"
    type: "ims_doc"
    name: "ISO 31000"
    description: "Risk Management Guidelines"
    clauses: []
  - id: "ims_iso55001"
    type: "ims_doc"
    name: "ISO 55001"
    description: "Asset Management Systems"
    clauses: []
  - id: "standard_document_control"
    type: "standard_def"
    name: "Document Control Standard"
    description: "Requirements for document creation, approval, distribution, and revision control"
    implements: ["ims_iso9001_71", "ims_iso9001_81"]
  - id: "iso9001_41"
    type: "ims_clause"
    name: "ISO 9001 Clause 4.1 - Understanding the organization and its context"
    description: "Organization must determine external and internal issues relevant to its purpose and strategic direction"
  - id: "iso9001_71"
    type: "ims_clause"
    name: "ISO 9001 Clause 7.1 - Resources"
    description: "Resources needed for establishing, implementing, maintaining and improving the QMS"
  - id: "iso9001_81"
    type: "ims_clause"
    name: "ISO 9001 Clause 8.1 - Operational planning and control"
    description: "Plan, implement and control processes to meet requirements"
  - id: "iso9001_91"
    type: "ims_clause"
    name: "ISO 9001 Clause 9.1 - Monitoring, measurement, analysis and evaluation"
    description: "Monitor, measure, analyze and evaluate QMS performance"
  - id: "standard_quality_assurance"
    type: "standard_def"
    name: "Quality Assurance Standard"
    description: "Requirements for quality planning, inspection, and continuous improvement"
    implements: ["ims_iso9001_81", "ims_iso9001_91"]
  - id: "standard_inspection_testing"
    type: "standard_def"
    name: "Inspection and Testing Standard"
    description: "Requirements for inspection and test planning, execution, and documentation"
    implements: ["ims_iso9001_81", "ims_iso9001_91"]
  - id: "anchor_contractual_requirements"
    type: "anchor"
    name: "Contractual Requirements Anchor"
    description: "Client-specified requirements and contractual obligations"
    derived_from: ["contract_documents"]
  - id: "anchor_quality_specifications"
    type: "anchor"
    name: "Quality Specifications Anchor"
    description: "Project-specific quality requirements and specifications"
    derived_from: ["contract_documents", "project_specifications"]
  - id: "anchor_regulatory_requirements"
    type: "anchor"
    name: "Regulatory Requirements Anchor"
    description: "Legal and regulatory compliance requirements"
    derived_from: ["local_regulations", "industry_standards"]
  - id: "requirement_document_management"
    type: "requirement_def"
    name: "Document Management"
    description: "All project documents must be controlled, versioned, and approved"
    implements: ["standard_document_control", "anchor_contractual_requirements"]
  - id: "requirement_quality_planning"
    type: "requirement_def"
    name: "Quality Planning"
    description: "Quality objectives and plans must be established and maintained"
    implements: ["standard_quality_assurance", "anchor_quality_specifications"]
  - id: "requirement_inspection_testing"
    type: "requirement_def"
    name: "Inspection and Testing"
    description: "Inspection and test procedures must be defined and executed"
    implements: ["standard_inspection_testing", "anchor_quality_specifications"]
  - id: "asset_wbs_plan"
    type: "asset"
    name: "Work Breakdown Structure Plan"
    description: "Envelope asset for WBS node hierarchy"
    fields: ["nodes", "mappings"]
    generated_by: ["graph_wbs_extraction"]
  - id: "asset_lbs_plan"
    type: "asset"
    name: "Location Breakdown Structure Plan"
    description: "Envelope asset for LBS node hierarchy"
    fields: ["locations", "mappings"]
    generated_by: ["graph_lbs_extraction"]
  - id: "asset_itp_template_plan"
    type: "asset"
    name: "ITP Template"
    description: "Inspection and Test Plan template with procedures and criteria"
    fields: ["procedures", "acceptance_criteria", "inspection_methods", "frequency"]
    generated_by: ["graph_itp_generation"]
  - id: "asset_lotcards_plan"
    type: "asset"
    name: "Lotcards Plan"
    description: "Lot cards mapping between WBS and LBS"
    fields: ["lot_cards", "mappings"]
    generated_by: ["graph_metadata_generator"]
  - id: "asset_quality_plan"
    type: "asset"
    name: "Quality Plan"
    description: "Project quality management plan"
    fields: ["objectives", "procedures", "responsibilities", "verification_methods"]
    generated_by: ["graph_plan_generation"]
  - id: "asset_project_details"
    type: "asset"
    name: "Project Details"
    description: "Extracted project metadata and specifications"
    fields: ["project_name", "project_address", "scope", "requirements"]
    generated_by: ["graph_project_details"]
  - id: "asset_qse_policy_statement"
    type: "asset"
    name: "QSE Policy Statement"
    description: "Corporate policy statement"
    fields: ["html", "document_number", "revision"]
  - id: "asset_qse_corporate_manual"
    type: "asset"
    name: "QSE Corporate Manual"
    description: "Integrated Management System Manual"
    fields: ["html", "document_number", "revision"]
  - id: "asset_qse_audit_procedure"
    type: "asset"
    name: "QSE Audit Procedure"
    description: "Internal audit procedure"
    fields: ["html", "document_number", "revision"]
  - id: "asset_qse_ncr_procedure"
    type: "asset"
    name: "QSE NCR Procedure"
    description: "Non-conformance report procedure"
    fields: ["html", "document_number", "revision"]
  - id: "asset_compliance_report"
    type: "asset"
    name: "Compliance Report"
    description: "Compliance report for generated assets"
    fields: ["summary", "findings", "nonconformities", "recommendations"]
  - id: "standards_profile"
    type: "asset"
    name: "Standards Profile"
    description: "Resolved standards profile for a project"
    fields: ["jurisdiction", "standards", "notes"]
  - id: "spec_mrts01"
    type: "asset"
    name: "MRTS01 Introduction"
    description: "Queensland TMR MRTS01 Introduction to Technical Specifications"
  - id: "spec_mrts04"
    type: "asset"
    name: "MRTS04 Earthworks"
    description: "Queensland TMR Earthworks Specification"
  - id: "spec_mrts70"
    type: "asset"
    name: "MRTS70 Concrete"
    description: "Queensland TMR Concrete Specification"
  - id: "spec_tfnsw_b80"
    type: "asset"
    name: "TfNSW B80"
    description: "Transport for NSW Bridgeworks Specification B80"
  - id: "spec_as3600"
    type: "asset"
    name: "AS 3600 Concrete Structures"
    description: "Australian Standard AS 3600"
  - id: "spec_as1289"
    type: "asset"
    name: "AS 1289 Methods of testing soils"
    description: "Australian Standard AS 1289"
  - id: "spec_qld_mrts50_2025_03"
    type: "asset"
    name: "MRTS50 Specific Quality System Requirements (March 2025)"
    description: "QLD TMR MRTS50"
    subtype: "jurisdictional"
  - id: "spec_nsw_q6_2024_02"
    type: "asset"
    name: "TfNSW Q6 Quality Management (Major Works) (Feb 2024)"
    description: "NSW Quality Management for Major Works"
    subtype: "jurisdictional"
  - id: "spec_sa_pcqa2_2024_09"
    type: "asset"
    name: "SA PC-QA2 Quality Management Requirements for Major Projects (Sep 2024)"
    description: "South Australia DIT Master Specification PC-QA2"
    subtype: "jurisdictional"
  - id: "spec_tas_sec160_2025_06"
    type: "asset"
    name: "TAS Section 160 Preliminaries – Construction (June 2025)"
    description: "Department of State Growth TAS Section 160"
    subtype: "jurisdictional"
  - id: "spec_vic_sec160_mw_2018_11"
    type: "asset"
    name: "VIC Section 160 Construction – General – Minor Works (Nov 2018)"
    description: "VicRoads Section 160 MW"
    subtype: "jurisdictional"
  - id: "pack_GLOBAL_DEFAULT_1_0_0"
    type: "asset"
    name: "GLOBAL DEFAULT Compliance Pack v1.0.0"
    description: "Baseline minimal pack with conservative defaults"
    subtype: "compliance_pack"
    content:
      jurisdiction: "GLOBAL"
      agency: "ProjectPro"
      version: "1.0.0"
      required_registers: ["RMP_minimal"]
      itp_requirements: {}
      hold_points_spec: []
      witness_points_spec: []
      milestones_spec: []
      records_identified: []
      test_frequency_rules: []
      special_workflows: []
      ui_modules: ["quality_module"]
      schedulers: []
      feature_flags_default: { quality_module: true }
      rules:
        validators: []
        db_invariants: []
        app_validators: []
      standard_refs: []
  - id: "pack_QLD_MRTS50_2025_03"
    type: "asset"
    name: "QLD MRTS50 Compliance Pack (2025.03)"
    description: "QLD TMR MRTS50 pack"
    subtype: "compliance_pack"
    content:
      jurisdiction: "QLD"
      agency: "TMR"
      version: "2025.03"
      required_registers: ["work_lot_register","hold_witness_register","itp_register","identified_records_register"]
      itp_requirements: { endorsement_required: false }
      hold_points_spec: ["Nonconformance HP", "Critical construction stages"]
      witness_points_spec: ["Key activities per spec"]
      milestones_spec: ["As-Constructed delivery", "Practical Completion gating"]
      records_identified: ["Lot register","Conformance reports","As Constructed packages"]
      test_frequency_rules: ["QRS default levels applicable"]
      special_workflows: ["Indicative Conformance"]
      ui_modules: ["quality_module"]
      schedulers: []
      feature_flags_default: { quality_module: true, enable_qrs_requirements: true, enable_indicative_conformance: true }
      rules:
        validators: ["rq_number_required"]
        db_invariants: ["gate_lot_close_on_hp"]
        app_validators: ["qrs_requirements"]
      standard_refs: ["MRTS50","MRTS01","MRTS04","MRTS70"]
  - id: "pack_NSW_Q6_2024_02"
    type: "asset"
    name: "NSW Q6 Compliance Pack (2024.02)"
    description: "NSW TfNSW Q6 pack"
    subtype: "compliance_pack"
    content:
      jurisdiction: "NSW"
      agency: "TfNSW"
      version: "2024.02"
      required_registers: ["work_lot_register","hold_witness_register","itp_register","identified_records_register"]
      itp_requirements: { endorsement_required: true, endorsement_roles: ["Designer","Engineer"] }
      hold_points_spec: ["As per spec tables"]
      witness_points_spec: ["As per spec tables"]
      milestones_spec: ["Pre-opening validation"]
      records_identified: ["Quality Management Records","Testing and Commissioning Reports"]
      test_frequency_rules: ["Annex L sampling for areal outputs"]
      special_workflows: ["Primary Testing", "Annex L sampling"]
      ui_modules: ["quality_module"]
      schedulers: []
      feature_flags_default: { quality_module: true, enable_primary_testing: true, enable_annexL_sampling: true }
      rules:
        validators: ["characteristic_values_calc","lab_accreditation_required","annex_l_sampling"]
        db_invariants: ["gate_itp_endorsement","gate_lot_close_on_hp"]
        app_validators: ["annex_l_calc"]
      standard_refs: ["Q6"]
  - id: "pack_SA_PCQA2_2024_09"
    type: "asset"
    name: "SA PC-QA2 Compliance Pack (2024.09)"
    description: "South Australia DIT PC-QA2"
    subtype: "compliance_pack"
    content:
      jurisdiction: "SA"
      agency: "DIT"
      version: "2024.09"
      required_registers: ["work_lot_register","hold_witness_register","itp_register","identified_records_register"]
      itp_requirements: { endorsement_required: false }
      hold_points_spec: ["Engineering Authority HP"]
      witness_points_spec: ["Documentation and construction quality WPs"]
      records_identified: ["As-Built Records","Quality Management Records"]
      ui_modules: ["quality_module"]
      schedulers: []
      feature_flags_default: { quality_module: true, roles_required: ["Construction Quality Representative"], ncr_dual_mode: true }
      rules:
        validators: []
        db_invariants: ["gate_lot_close_on_hp"]
        app_validators: []
      standard_refs: ["PC-QA2"]
  - id: "pack_TAS_SEC160_2025_06"
    type: "asset"
    name: "TAS Section 160 Compliance Pack (2025.06)"
    description: "Tasmania DSG Section 160"
    subtype: "compliance_pack"
    content:
      jurisdiction: "TAS"
      agency: "DSG"
      version: "2025.06"
      required_registers: ["work_lot_register","hold_witness_register","itp_register","identified_records_register"]
      itp_requirements: { endorsement_required: false }
      hold_points_spec: ["Pre-commencement documents"]
      witness_points_spec: ["Work Lot register monthly"]
      ui_modules: ["quality_module"]
      schedulers: []
      feature_flags_default: { quality_module: true }
      rules:
        validators: []
        db_invariants: ["gate_lot_close_on_hp"]
        app_validators: []
      standard_refs: ["Section 160 TAS"]
  - id: "pack_VIC_SEC160_MW_2018_11"
    type: "asset"
    name: "VIC Section 160 MW Compliance Pack (2018.11)"
    description: "VicRoads Section 160 Minor Works"
    subtype: "compliance_pack"
    content:
      jurisdiction: "VIC"
      agency: "DoT/VicRoads"
      version: "2018.11"
      required_registers: ["work_lot_register","hold_witness_register","itp_register","identified_records_register"]
      itp_requirements: { endorsement_required: false }
      hold_points_spec: ["Commencement HP", "Calibration records WP"]
      ui_modules: ["quality_module"]
      schedulers: []
      feature_flags_default: { quality_module: true }
      rules:
        validators: []
        db_invariants: ["gate_lot_close_on_hp"]
        app_validators: []
      standard_refs: ["Section 160 MW VIC"]
edges:
  - { source: "page_projects_dashboard", target: "component_ProjectList", type: "renders_component" }
  - { source: "page_project_overview", target: "component_ProjectInfoDisplay", type: "renders_component" }
  - { source: "page_project_documents", target: "component_DocumentList", type: "renders_component" }
  - { source: "page_wbs", target: "component_WbsView", type: "renders_component" }
  - { source: "page_lbs", target: "component_LotRegisterTable", type: "renders_component" }
  - { source: "page_itp_templates", target: "component_ItpTemplateEditorEnhanced", type: "renders_component" }
  - { source: "page_itp_documents", target: "component_ItpDocumentList", type: "renders_component" }
  - { source: "page_project_details", target: "component_ProjectSettings", type: "renders_component" }
  - { source: "page_quality_lots", target: "component_WorkLotRegister", type: "renders_component" }
  - { source: "page_quality_hold_witness", target: "component_HoldWitnessRegister", type: "renders_component" }
  - { source: "page_quality_itp_register", target: "component_ItpRegister", type: "renders_component" }
  - { source: "page_quality_records", target: "component_RecordsHandoverDashboard", type: "renders_component" }
  - { source: "page_primary_testing", target: "component_PrimaryTestingView", type: "renders_component" }
  - { source: "page_inspections", target: "component_InspectionRegister", type: "renders_component" }
  - { source: "page_inspection_detail", target: "component_InspectionRequestForm", type: "renders_component" }
  - { source: "page_materials", target: "component_MaterialApprovalsRegister", type: "renders_component" }
  - { source: "page_mix_designs", target: "component_MixDesignsList", type: "renders_component" }
  - { source: "page_certificates", target: "component_CertificatesRegister", type: "renders_component" }
  - { source: "page_tests", target: "component_TestRegister", type: "renders_component" }
  - { source: "page_samples", target: "component_SampleRegister", type: "renders_component" }
  - { source: "page_methods_library", target: "component_MethodsLibrary", type: "renders_component" }
  - { source: "page_lot_closeout", target: "component_LotCloseoutPack", type: "renders_component" }
  - { source: "page_swms_register", target: "component_SwmsRegister", type: "renders_component" }
  - { source: "page_permits_register", target: "component_PermitsRegister", type: "renders_component" }
  - { source: "page_toolbox_talks", target: "component_ToolboxTalks", type: "renders_component" }
  - { source: "page_safety_walks", target: "component_SafetyWalks", type: "renders_component" }
  - { source: "page_inductions", target: "component_InductionsRegister", type: "renders_component" }
  - { source: "page_incidents", target: "component_IncidentRegister", type: "renders_component" }
  - { source: "page_capa", target: "component_CapaTracking", type: "renders_component" }
  - { source: "page_daily_diaries", target: "component_DailyDiaryPage", type: "renders_component" }
  - { source: "page_site_instructions", target: "component_SiteInstructionsPage", type: "renders_component" }
  - { source: "page_timesheets", target: "component_TimesheetsPage", type: "renders_component" }
  - { source: "page_roster", target: "component_RosterPage", type: "renders_component" }
  - { source: "page_plant", target: "component_PlantPage", type: "renders_component" }
  - { source: "page_approvals_designer", target: "component_ApprovalsDesigner", type: "renders_component" }
  - { source: "page_approvals_inbox", target: "component_ApprovalsInbox", type: "renders_component" }
  - { source: "page_project_inbox", target: "component_ProjectInbox", type: "renders_component" }
  - { source: "page_map", target: "component_MapView", type: "renders_component" }
  - { source: "page_reports", target: "component_ReportsDashboard", type: "renders_component" }
  - { source: "page_client_projects", target: "component_ClientProjectList", type: "renders_component" }
  - { source: "page_client_dashboard", target: "component_ClientDashboard", type: "renders_component" }
  - { source: "page_client_details", target: "component_ClientProjectDetails", type: "renders_component" }
  - { source: "page_client_documents", target: "component_ClientDocumentList", type: "renders_component" }
  - { source: "page_client_itp_templates", target: "component_ClientItpTemplateList", type: "renders_component" }
  - { source: "page_client_lots", target: "component_ClientLotList", type: "renders_component" }
  - { source: "page_client_ncrs", target: "component_ClientNcrList", type: "renders_component" }
  - { source: "page_client_pending_approvals", target: "component_ClientPendingApprovals", type: "renders_component" }
  - { source: "page_client_management_plans", target: "component_ClientManagementPlans", type: "renders_component" }
  - { source: "page_client_wbs", target: "component_ClientWbsView", type: "renders_component" }
  - { source: "component_ProjectList", target: "api_projects", type: "calls_api" }
  - { source: "component_ProjectInfoDisplay", target: "api_projects", type: "calls_api" }
  - { source: "component_DocumentList", target: "api_documents", type: "calls_api" }
  - { source: "component_WbsView", target: "api_projects", type: "calls_api" }
  - { source: "component_WbsView", target: "api_plans", type: "calls_api" }
  - { source: "component_WbsView", target: "api_assets", type: "calls_api" }
  - { source: "component_ClientWbsView", target: "api_plans", type: "calls_api" }
  - { source: "component_LotRegisterTable", target: "api_projects", type: "calls_api" }
  - { source: "component_LotRegisterTable", target: "api_plans", type: "calls_api" }
  - { source: "component_LotRegisterTable", target: "api_assets", type: "calls_api" }
  - { source: "component_ItpTemplateEditorEnhanced", target: "api_itp", type: "calls_api" }
  - { source: "component_ClientManagementPlans", target: "api_plans", type: "calls_api" }
  - { source: "component_ClientManagementPlans", target: "api_assets", type: "calls_api" }
  - { source: "component_ClientItpTemplateList", target: "api_itp", type: "calls_api" }
  - { source: "component_NewProjectUploadPage", target: "api_projects_generate_upload_urls", type: "calls_api" }
  - { source: "component_NewProjectUploadPage", target: "api_projects_notify_uploads_complete", type: "calls_api" }
  - { source: "component_NewProjectUploadPage", target: "api_langgraph_stream", type: "calls_api" }
  - { source: "component_QsePage", target: "api_qse", type: "calls_api" }
  - { source: "component_InspectionRegister", target: "api_inspections", type: "calls_api" }
  - { source: "component_InspectionRequestForm", target: "api_inspections", type: "calls_api" }
  - { source: "component_InspectionSignaturePanel", target: "api_inspections", type: "calls_api" }
  - { source: "component_MaterialApprovalsRegister", target: "api_materials", type: "calls_api" }
  - { source: "component_MixDesignsList", target: "api_materials", type: "calls_api" }
  - { source: "component_CertificatesRegister", target: "api_materials", type: "calls_api" }
  - { source: "component_TestRegister", target: "api_tests", type: "calls_api" }
  - { source: "component_SampleRegister", target: "api_tests", type: "calls_api" }
  - { source: "component_MethodsLibrary", target: "api_tests", type: "calls_api" }
  - { source: "component_LotCloseoutPack", target: "api_lot_closeout", type: "calls_api" }
  - { source: "component_SwmsRegister", target: "api_hse", type: "calls_api" }
  - { source: "component_PermitsRegister", target: "api_hse", type: "calls_api" }
  - { source: "component_ToolboxTalks", target: "api_hse", type: "calls_api" }
  - { source: "component_SafetyWalks", target: "api_hse", type: "calls_api" }
  - { source: "component_InductionsRegister", target: "api_hse", type: "calls_api" }
  - { source: "component_IncidentRegister", target: "api_hse", type: "calls_api" }
  - { source: "component_CapaTracking", target: "api_hse", type: "calls_api" }
  - { source: "component_DailyDiaryPage", target: "api_daily_diaries", type: "calls_api" }
  - { source: "component_SiteInstructionsPage", target: "api_site_instructions", type: "calls_api" }
  - { source: "component_TimesheetsPage", target: "api_timesheets", type: "calls_api" }
  - { source: "component_RosterPage", target: "api_roster", type: "calls_api" }
  - { source: "component_PlantPage", target: "api_plant", type: "calls_api" }
  - { source: "component_ApprovalsDesigner", target: "api_approvals_workflows", type: "calls_api" }
  - { source: "component_ApprovalsInbox", target: "api_approvals_workflows", type: "calls_api" }
  - { source: "component_ProjectInbox", target: "api_email_ingest", type: "calls_api" }
  - { source: "component_MapView", target: "api_map", type: "calls_api" }
  - { source: "component_ReportsDashboard", target: "api_reports", type: "calls_api" }
  - { source: "component_WorkLotRegister", target: "api_quality_lots", type: "calls_api" }
  - { source: "component_HoldWitnessRegister", target: "api_quality_hold_witness", type: "calls_api" }
  - { source: "component_ItpRegister", target: "api_quality_itp_register", type: "calls_api" }
  - { source: "component_RecordsHandoverDashboard", target: "api_quality_records", type: "calls_api" }
  - { source: "component_PrimaryTestingView", target: "api_quality_primary_testing", type: "calls_api" }
  - { source: "api_projects", target: "action_project_actions", type: "calls_action" }
  - { source: "api_projects_generate_upload_urls", target: "action_document_actions", type: "calls_action" }
  - { source: "api_projects_notify_uploads_complete", target: "action_document_actions", type: "calls_action" }
  - { source: "api_langgraph_stream", target: "action_langgraph_actions", type: "calls_action" }
  - { source: "api_langgraph_raw_stream", target: "action_langgraph_actions", type: "calls_action" }
  - { source: "api_processing_status", target: "action_langgraph_actions", type: "calls_action" }
  - { source: "api_documents", target: "action_document_actions", type: "calls_action" }
  - { source: "api_itp", target: "action_itp_template_actions", type: "calls_action" }
  - { source: "api_itp", target: "action_itp_actions", type: "calls_action" }
  - { source: "api_itp_generate", target: "action_itp_actions", type: "calls_action" }
  - { source: "api_qse", target: "action_qse_actions", type: "calls_action" }
  - { source: "api_qse_doc", target: "action_qse_actions", type: "calls_action" }
  - { source: "api_inspections", target: "action_inspection_actions", type: "calls_action" }
  - { source: "api_materials", target: "action_material_actions", type: "calls_action" }
  - { source: "api_tests", target: "action_test_actions", type: "calls_action" }
  - { source: "api_lot_closeout", target: "action_lot_closeout_actions", type: "calls_action" }
  - { source: "api_hse", target: "action_hse_actions", type: "calls_action" }
  - { source: "api_daily_diaries", target: "action_field_actions", type: "calls_action" }
  - { source: "api_site_instructions", target: "action_field_actions", type: "calls_action" }
  - { source: "api_timesheets", target: "action_timesheet_actions", type: "calls_action" }
  - { source: "api_roster", target: "action_roster_actions", type: "calls_action" }
  - { source: "api_plant", target: "action_plant_actions", type: "calls_action" }
  - { source: "api_approvals_workflows", target: "action_approvals_engine_actions", type: "calls_action" }
  - { source: "api_email_ingest", target: "action_email_ingest_actions", type: "calls_action" }
  - { source: "api_map", target: "action_map_actions", type: "calls_action" }
  - { source: "api_reports", target: "action_performance_actions", type: "calls_action" }
  - { source: "api_quality_lots", target: "action_worklot_actions", type: "calls_action" }
  - { source: "api_quality_hold_witness", target: "action_inspection_point_actions", type: "calls_action" }
  - { source: "api_quality_itp_register", target: "action_itp_actions", type: "calls_action" }
  - { source: "api_quality_records", target: "action_records_management_actions", type: "calls_action" }
  - { source: "api_project_compliance_config", target: "action_compliance_config_actions", type: "calls_action" }
  - { source: "api_quality_primary_testing", target: "action_primary_testing_actions", type: "calls_action" }
  - { source: "api_create_checkout_session", target: "action_stripe_actions", type: "calls_action" }
  - { source: "api_stripe_webhook", target: "action_stripe_actions", type: "calls_action" }
  - { source: "action_document_actions", target: "action_langgraph_actions", type: "calls_action" }
  - { source: "action_langgraph_actions", target: "action_langgraph_server_actions", type: "calls_action" }
  - { source: "action_wbs_actions", target: "action_langgraph_server_actions", type: "calls_action" }
  - { source: "action_itp_actions", target: "action_langgraph_server_actions", type: "calls_action" }
  - { source: "action_email_ingest_actions", target: "action_langgraph_server_actions", type: "calls_action" }
  - { source: "action_approvals_engine_actions", target: "action_langgraph_server_actions", type: "calls_action" }
  - { source: "action_worklot_actions", target: "action_langgraph_server_actions", type: "calls_action" }
  - { source: "action_records_management_actions", target: "action_langgraph_server_actions", type: "calls_action" }
  - { source: "action_compliance_config_actions", target: "action_langgraph_server_actions", type: "calls_action" }
  - { source: "action_langgraph_server_actions", target: "service_langgraph_server_v10", type: "calls_service" }
  - { source: "action_project_actions", target: "table_projects", type: "writes_table" }
  - { source: "action_project_actions", target: "table_assets", type: "reads_table" }
  - { source: "action_document_actions", target: "table_documents", type: "writes_table" }
  - { source: "action_document_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_graph_repo", target: "table_assets", type: "writes_table" }
  - { source: "action_graph_repo", target: "table_asset_edges", type: "writes_table" }
  - { source: "action_graph_repo", target: "table_audit_events", type: "writes_table" }
  - { source: "action_langgraph_actions", target: "table_projects", type: "reads_table" }
  - { source: "action_langgraph_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_langgraph_actions", target: "table_processing_runs", type: "writes_table" }
  - { source: "action_langgraph_actions", target: "table_asset_edges", type: "writes_table" }
  - { source: "action_itp_template_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_itp_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_qse_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_wbs_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_wbs_actions", target: "table_asset_edges", type: "writes_table" }
  - { source: "action_lot_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_asset_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_compliance_config_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_compliance_config_actions", target: "table_project_feature_flags", type: "writes_table" }
  - { source: "action_compliance_config_actions", target: "table_projects", type: "writes_table" }
  - { source: "action_compliance_config_actions", target: "table_audit_events", type: "writes_table" }
  - { source: "action_inspection_point_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_worklot_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_primary_testing_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_records_management_actions", target: "table_assets", type: "writes_table" }
  - { source: "action_quarry_actions", target: "table_assets", type: "writes_table" }
  - { source: "graph_project_details", target: "prompt_project_details_extraction", type: "uses_prompt" }
  - { source: "graph_wbs_extraction", target: "prompt_wbs_extraction", type: "uses_prompt" }
  - { source: "graph_standards_extraction", target: "prompt_standards_extraction", type: "uses_prompt" }
  - { source: "graph_lbs_extraction", target: "prompt_lbs_extraction", type: "uses_prompt" }
  - { source: "graph_itp_generation", target: "prompt_itp_generation", type: "uses_prompt" }
  - { source: "graph_conformance_checker", target: "prompt_conformance_rule_engine", type: "uses_prompt" }
  - { source: "graph_email_ingest", target: "prompt_email_parsing", type: "uses_prompt" }
  - { source: "graph_approvals_engine", target: "prompt_approvals_rules", type: "uses_prompt" }
  - { source: "graph_metadata_generator", target: "tool_metadata_generator", type: "uses_tool" }
  - { source: "graph_db_fetcher", target: "tool_db_connection", type: "uses_tool" }
  - { source: "graph_db_updater", target: "tool_db_connection", type: "uses_tool" }
  - { source: "graph_azure_storage", target: "tool_azure_storage", type: "uses_tool" }
  - { source: "graph_email_ingest", target: "tool_mime_parser", type: "uses_tool" }
  - { source: "graph_conformance_checker", target: "tool_sla_notifier", type: "uses_tool" }
  - { source: "graph_approvals_engine", target: "tool_calendar_scheduler", type: "uses_tool" }
  - { source: "asset_wbs_plan", target: "spec_mrts01", type: "references_standard" }
  - { source: "asset_lbs_plan", target: "spec_mrts04", type: "references_standard" }
  - { source: "asset_itp_template_plan", target: "spec_tfnsw_b80", type: "references_standard" }
  - { source: "asset_itp_template_plan", target: "spec_mrts70", type: "references_standard" }
  - { source: "pack_QLD_MRTS50_2025_03", target: "spec_qld_mrts50_2025_03", type: "references_standard" }
  - { source: "pack_QLD_MRTS50_2025_03", target: "spec_mrts01", type: "references_standard" }
  - { source: "pack_QLD_MRTS50_2025_03", target: "spec_mrts04", type: "references_standard" }
  - { source: "pack_QLD_MRTS50_2025_03", target: "spec_mrts70", type: "references_standard" }
  - { source: "pack_NSW_Q6_2024_02", target: "spec_nsw_q6_2024_02", type: "references_standard" }
  - { source: "pack_SA_PCQA2_2024_09", target: "spec_sa_pcqa2_2024_09", type: "references_standard" }
  - { source: "pack_TAS_SEC160_2025_06", target: "spec_tas_sec160_2025_06", type: "references_standard" }
  - { source: "pack_VIC_SEC160_MW_2018_11", target: "spec_vic_sec160_mw_2018_11", type: "references_standard" }
relations:
  - name: "complete_project_processing_chain"
    description: "End-to-end project processing from document upload to final artifacts"
    sequence: ["graph_document_extraction", "graph_project_details", "graph_standards_extraction", "graph_plan_generation", "graph_wbs_extraction", "graph_lbs_extraction", "graph_itp_generation"]
    output_artifacts: ["asset_wbs_plan", "asset_lbs_plan", "asset_itp_template_plan", "asset_lotcards_plan"]
    database_storage: ["table_assets"]
    asset_types_generated: ["plan", "itp_template", "itp_document"]
  - name: "qa_execution_chain"
    description: "ITP to IR to Tests to Conformance to Lot Closeout"
    sequence: ["itp_document", "inspection_request", "test_request", "sample", "test_result", "graph_conformance_checker", "lot"]
    output_artifacts: ["inspection_request", "test_request", "test_result", "lot"]
    database_storage: ["table_assets"]
  - name: "hse_chain"
    description: "HSE lifecycle from planning to incidents and CAPA"
    sequence: ["swms","permit","toolbox_talk","safety_walk","incident","capa"]
    output_artifacts: ["incident","capa"]
  - name: "field_ops_chain"
    description: "Daily diary to site instructions and plant logs"
    sequence: ["daily_diary","site_instruction","timesheet","plant_prestart","maintenance_record","utilization_log"]
    output_artifacts: ["daily_diary","site_instruction"]
  - name: "approvals_chain"
    description: "Approvals engine workflow"
    sequence: ["approval_workflow","rule","graph_approvals_engine"]
    output_artifacts: ["approval_workflow"]
    database_storage: ["table_assets"]
  - name: "email_ingest_chain"
    description: "Email ingestion to correspondence threading and referencing"
    sequence: ["api_email_ingest","graph_email_ingest","correspondence"]
    output_artifacts: ["correspondence"]
    database_storage: ["table_assets","table_correspondence_threads"]
  - name: "quality_management_compliance_chain"
    description: "How quality management flows from ISO standards to implementation"
    sequence: ["ims_iso9001", "standard_quality_assurance", "requirement_quality_planning", "asset_quality_plan", "asset_wbs_plan"]
    compliance_level: "ISO 9001:2015"
    database_tables: ["table_assets"]
  - name: "inspection_testing_compliance_chain"
    description: "How inspection and testing flows from standards to implementation"
    sequence: ["ims_iso9001", "standard_inspection_testing", "requirement_inspection_testing", "asset_itp_template_plan", "itp_document"]
    compliance_level: "ISO 9001:2015"
    database_tables: ["table_assets"]
  - name: "document_processing_to_ui_chain"
    description: "How documents flow through AI processing to user interface"
    sequence: ["table_documents", "graph_document_extraction", "asset_wbs_plan", "component_WbsView"]
    data_flow: "document → AI processing → database → UI component"
    database_tables: ["table_documents", "table_assets"]
  - name: "qse_corporate_compliance_chain"
    description: "QSE corporate system compliance and implementation chain"
    sequence: ["ims_iso9001", "asset_qse_policy_statement", "asset_qse_audit_procedure", "asset_qse_ncr_procedure", "table_assets"]
    compliance_level: "ISO 9001:2015"
    qse_categories: ["policy_roles", "audit", "ncr", "documentation"]
    content_structures: ["html"]
    document_numbers: ["QSE-5.2-POL-01", "QSE-9.2-PROC-01", "QSE-10.2-PROC-01"]
  - name: "construction_management_chain"
    description: "Construction management from planning to execution"
    sequence: ["asset_wbs_plan", "asset_lbs_plan", "asset_lotcards_plan", "component_LotRegisterTable"]
    database_tables: ["table_assets"]
    content_structures: ["nodes", "lot_cards", "work_levels"]
    management_levels: ["strategic", "tactical", "operational"]
  - name: "jurisdiction_resolution_chain"
    description: "Detect state and resolve standards profile & bind pack"
    sequence: ["graph_project_details", "graph_jurisdiction_resolver", "graph_standards_resolver"]
    output_artifacts: ["standards_profile", "project_compliance_config"]
    database_storage: ["table_assets"]
  - name: "template_variant_resolution_chain"
    description: "Select template variant and generate ITP"
    sequence: ["graph_template_variant_selector", "graph_itp_generation"]
    output_artifacts: ["asset_itp_template_plan"]
    database_storage: ["table_assets"]
  - name: "compliance_chain"
    description: "Produce compliance report for generated assets"
    sequence: ["graph_compliance_checker"]
    output_artifacts: ["asset_compliance_report"]
    database_storage: ["table_assets"]
  - name: "server_action_pattern"
    description: "Standard Next.js server action pattern for data mutations"
    components: ["action_project_actions", "table_projects", "api_projects"]
    pattern_type: "server_action_crud"
  - name: "ai_processing_pattern"
    description: "AI document processing pattern with LangGraph orchestration and provenance"
    components: ["graph_orchestrator", "api_langgraph_stream", "action_langgraph_actions", "table_processing_runs", "table_asset_edges"]
    pattern_type: "ai_orchestration"
  - name: "approval_workflow_pattern"
    description: "Client approval workflow pattern for project artifacts"
    components: ["action_client_generic_approval", "table_assets", "component_ClientItpRevisionTable"]
    pattern_type: "approval_workflow"
  - name: "qms_to_iso_mapping"
    description: "Mapping of QMS requirements to ISO standards"
    mappings:
      - { qms_requirement: "asset_qse_policy_statement", iso_standard: "ims_iso9001", clause: "5.2" }
      - { qms_requirement: "asset_qse_audit_procedure", iso_standard: "ims_iso9001", clause: "9.2" }
      - { qms_requirement: "asset_qse_ncr_procedure", iso_standard: "ims_iso9001", clause: "10.2" }
  - name: "construction_standard_mapping"
    description: "Mapping of construction activities to technical standards"
    mappings:
      - { activity: "earthworks", standards: ["spec_mrts04", "spec_as1289"] }
      - { activity: "concrete_work", standards: ["spec_mrts70", "spec_as3600"] }
      - { activity: "bridge_construction", standards: ["spec_tfnsw_b80", "spec_as3600"] }
anchors:
  - id: "contract_documents"
    type: "data_source"
    name: "Contract Documents"
    description: "Client contract documents and specifications"
    source_type: "uploaded_files"
    processing_agents: ["graph_document_extraction", "graph_project_details"]
  - id: "technical_specifications"
    type: "data_source"
    name: "Technical Specifications"
    description: "Technical drawings and specifications"
    source_type: "uploaded_files"
    processing_agents: ["graph_wbs_extraction", "graph_lbs_extraction"]
  - id: "quality_requirements"
    type: "requirement_source"
    name: "Quality Requirements"
    description: "Quality management and compliance requirements"
    source_type: "corporate_standards"
    processing_agents: ["graph_standards_extraction", "graph_itp_generation"]

